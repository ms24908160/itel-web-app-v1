{"version":3,"sources":["assets/images/account.png","assets/images/accountgreen.png","assets/images/home.png","assets/images/generate.png","assets/images/template.png","assets/images/knowledge.png","assets/images/management.png","components/Navbar.tsx","assets/images/MD.png","components/Footer.tsx","components/withFooter.tsx","pages/HomePage.tsx","pages/TestCaseGenerationPage.tsx","pages/TestCaseTemplatesPage.tsx","pages/QualityAssuranceKnowledgePage.tsx","pages/SignInSignUpPage.tsx","components/BackButton.tsx","pages/URLBasedGenerationPage.tsx","pages/ScreenshotBasedGenerationPage.tsx","pages/TestCaseClassificationPage.tsx","pages/ManagementPage.tsx","App.tsx","index.tsx"],"names":["Navbar","location","useLocation","navigate","useNavigate","isScrolled","setIsScrolled","useState","isLoggedIn","setIsLoggedIn","useEffect","token","localStorage","getItem","handleScroll","window","scrollY","addEventListener","removeEventListener","_jsxs","_Fragment","children","className","_jsx","Link","to","style","fontFamily","fontSize","marginRight","marginLeft","type","id","pathname","onClick","handleLogout","removeItem","src","accountGreenIcon","alt","height","width","marginBottom","homeIcon","generateIcon","templateIcon","knowledgeIcon","managementIcon","accountIcon","Footer","logo","href","withFooter","WrappedComponent","HomePage","TestCaseGenerationPage","role","setRole","async","decodedToken","JSON","parse","atob","split","error","console","fetchUserRole","title","handleRestrictedAccess","alert","testCases","seleniumTemplates","TestCaseTemplatesPage","Object","entries","map","_ref","tc","data","csv","join","blob","Blob","url","URL","createObjectURL","link","document","createElement","setAttribute","click","downloadTC","Number","item","index","navigator","clipboard","writeText","top","right","QualityAssuranceKnowledgePage","target","rel","SignInSignUpPage","signInEmail","setSignInEmail","signInPassword","setSignInPassword","signInMessage","setSignInMessage","signUpEmail","setSignUpEmail","signUpPassword","setSignUpPassword","signUpMessage","setSignUpMessage","onSubmit","e","preventDefault","response","axios","post","email","password","setItem","log","setTimeout","_error$response2","_error$response2$data","isAxiosError","message","htmlFor","value","onChange","placeholder","required","_error$response","_error$response$data","BackButton","handleClick","URLBasedGenerationPage","setUrl","setTestCases","setError","fetch","method","headers","Authorization","body","stringify","ok","errorData","json","Error","err","length","testCase","ScreenshotBasedGenerationPage","image","setImage","loading","setLoading","handleAnalyze","formData","FormData","append","status","downloadFile","format","content","mimeType","fileExtension","download","accept","event","files","file","includes","size","maxWidth","maxHeight","border","display","margin","disabled","DropdownButton","Dropdown","Item","TestCaseClassificationPage","classifiedTestCases","setClassifiedTestCases","exportTestCases","category","name","endsWith","rows","onBlur","input","trim","pageTag","filePath","encodeURIComponent","ManagementPage","userFiles","setUserFiles","selectedFile","setSelectedFile","fileContent","setFileContent","editableContent","setEditableContent","editHistory","setEditHistory","tableHeaders","setTableHeaders","isEditMode","setIsEditMode","searchQuery","setSearchQuery","isLoading","setIsLoading","URLSearchParams","search","get","warn","exportFile","row","header","filteredFiles","filter","toLowerCase","fetchUserFiles","backgroundColor","zIndex","overflowY","fileName","keys","fetchFileContent","cursor","rowIndex","prev","updated","undoLastEdit","lastEdit","slice","App","Router","Routes","Route","path","element","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"sXAAe,G,YAAA,IAA0B,qCCA1B,MAA0B,yCCA1B,MAA0B,iCCA1B,MAA0B,qCCA1B,MAA0B,qCCA1B,MAA0B,sCCA1B,MAA0B,uC,OCwJ1BA,MA3IUA,KACrB,MAAMC,EAAWC,cACXC,EAAWC,eACVC,EAAYC,GAAiBC,oBAAS,IACtCC,EAAYC,GAAiBF,oBAAS,GAE7CG,qBAAU,KAEN,MAAMC,EAAQC,aAAaC,QAAQ,SACnCJ,IAAgBE,EAAM,GACvB,IAEHD,qBAAU,KACN,MAAMI,EAAeA,KACbC,OAAOC,QAAU,GACjBV,GAAc,GAEdA,GAAc,EAClB,EAIJ,OADAS,OAAOE,iBAAiB,SAAUH,GAC3B,KACHC,OAAOG,oBAAoB,SAAUJ,EAAa,CACrD,GACF,IASH,OACIK,eAAAC,WAAA,CAAAC,SAAA,CACIF,eAAA,OAAKG,UAAW,sDAAqDjB,EAAa,SAAW,IAAKgB,SAAA,CAC9FE,cAACC,IAAI,CAACF,UAAU,eAAeG,GAAG,IAAIC,MAAO,CAAEC,WAAY,gBAAiBC,SAAU,OAAQC,YAAa,OAAQC,WAAY,QAAST,SAAC,SAGzIE,cAAA,UAAQD,UAAU,iBAAiBS,KAAK,SAAS,cAAY,WAAW,cAAY,aAAa,gBAAc,YAAY,gBAAc,QAAQ,aAAW,oBAAmBV,SAC3KE,cAAA,QAAMD,UAAU,0BAEpBH,eAAA,OAAKG,UAAU,2BAA2BU,GAAG,YAAWX,SAAA,CACpDF,eAAA,MAAIG,UAAU,qBAAoBD,SAAA,CAC9BE,cAAA,MAAID,UAAW,aAAkC,MAAtBrB,EAASgC,SAAmB,SAAW,IAAKZ,SACnEE,cAACC,IAAI,CAACF,UAAU,WAAWG,GAAG,IAAGJ,SAAC,WAEtCE,cAAA,MAAID,UAAW,aAAkC,0BAAtBrB,EAASgC,SAAuC,SAAW,IAAKZ,SACvFE,cAACC,IAAI,CAACF,UAAU,WAAWG,GAAG,wBAAuBJ,SAAC,2BAE1DE,cAAA,MAAID,UAAW,aAAkC,yBAAtBrB,EAASgC,SAAsC,SAAW,IAAKZ,SACtFE,cAACC,IAAI,CAACF,UAAU,WAAWG,GAAG,uBAAsBJ,SAAC,0BAEzDE,cAAA,MAAID,UAAW,aAAkC,iCAAtBrB,EAASgC,SAA8C,SAAW,IAAKZ,SAC9FE,cAACC,IAAI,CAACF,UAAU,WAAWG,GAAG,+BAA8BJ,SAAC,kCAGjEE,cAAA,MAAID,UAAW,aAAkC,gBAAtBrB,EAASgC,SAA6B,SAAW,IAAKZ,SAC7EE,cAACC,IAAI,CAACF,UAAU,WAAWG,GAAG,cAAaJ,SAAC,oBAGpDE,cAAA,MAAID,UAAU,qBAAoBD,SAC7Bb,EACGW,eAAAC,WAAA,CAAAC,SAAA,CACIE,cAAA,MAAID,UAAU,WAAUD,SACpBE,cAAA,UAAQW,QAtCnBC,KACjBvB,aAAawB,WAAW,SACxB3B,GAAc,GACdN,EAAS,iBAAiB,EAmCiCmB,UAAU,sCAAqCD,SAAC,aAInFE,cAAA,MAAID,UAAU,WAAUD,SACpBE,cAACC,IAAI,CAACF,UAAU,WAAWG,GAAG,iBAAgBJ,SAC1CE,cAAA,OACIc,IAAKC,EACLC,IAAI,UACJb,MAAO,CAAEc,OAAQ,OAAQC,MAAO,iBAMhDlB,cAAA,MAAID,UAAU,WAAUD,SACpBE,cAAA,UACIW,QAASA,IAAM/B,EAAS,kBACxBmB,UAAU,sCAAqCD,SAClD,2BAQrBF,eAAA,OAAKG,UAAW,eAAcjB,EAAa,UAAY,IAAKgB,SAAA,CACxDE,cAACC,IAAI,CAACF,UAAU,eAAeG,GAAG,IAAIC,MAAO,CAAEC,WAAY,gBAAiBC,SAAU,OAAQc,aAAc,QAASrB,SAAC,SAGtHF,eAAA,MAAIG,UAAU,WAAUD,SAAA,CACpBE,cAAA,MAAID,UAAW,kBAAuC,MAAtBrB,EAASgC,SAAmB,SAAW,IAAKZ,SACxEE,cAACC,IAAI,CAACF,UAAU,gBAAgBG,GAAG,IAAGJ,SAClCE,cAAA,OAAKc,IAAKM,EAAUJ,IAAI,aAGhChB,cAAA,MAAID,UAAW,kBAAuC,0BAAtBrB,EAASgC,SAAuC,SAAW,IAAKZ,SAC5FE,cAACC,IAAI,CAACF,UAAU,gBAAgBG,GAAG,wBAAuBJ,SACtDE,cAAA,OAAKc,IAAKO,EAAcL,IAAI,6BAGpChB,cAAA,MAAID,UAAW,kBAAuC,yBAAtBrB,EAASgC,SAAsC,SAAW,IAAKZ,SAC3FE,cAACC,IAAI,CAACF,UAAU,gBAAgBG,GAAG,uBAAsBJ,SACrDE,cAAA,OAAKc,IAAKQ,EAAcN,IAAI,4BAGpChB,cAAA,MAAID,UAAW,kBAAuC,iCAAtBrB,EAASgC,SAA8C,SAAW,IAAKZ,SACnGE,cAACC,IAAI,CAACF,UAAU,gBAAgBG,GAAG,+BAA8BJ,SAC7DE,cAAA,OAAKc,IAAKS,EAAeP,IAAI,oCAIrChB,cAAA,MAAID,UAAW,kBAAuC,gBAAtBrB,EAASgC,SAA6B,SAAW,IAAKZ,SAClFE,cAACC,IAAI,CAACF,UAAU,gBAAgBG,GAAG,cAAaJ,SAC5CE,cAAA,OAAKc,IAAKU,EAAgBR,IAAI,sBAI1ChB,cAAA,OAAKD,UAAU,mBAAkBD,SAC7BE,cAACC,IAAI,CAACF,UAAU,gBAAgBG,GAAG,iBAAgBJ,SAC/CE,cAAA,OACIc,IAAK7B,EAAa8B,EAAmBU,EACrCT,IAAI,UACJb,MAAO,CAAEc,OAAQ,OAAQC,MAAO,mBAKjD,ECpJI,G,MAAA,IAA0B,gCCgC1BQ,MA3BUA,IAEjB9B,eAAA,UAAQG,UAAU,yCAAwCD,SAAA,CACtDF,eAAA,OAAKG,UAAU,wBAAuBD,SAAA,CAClCE,cAAA,OAAKc,IAAKa,EAAMX,IAAI,OAAOjB,UAAU,qBACrCH,eAAA,MAAIG,UAAU,mBAAkBD,SAAA,CAC5BE,cAAA,MAAID,UAAU,mBAAkBD,SAC5BE,cAAA,KAAG4B,KAAK,YAAY7B,UAAU,aAAYD,SAAC,eAE/CE,cAAA,MAAID,UAAU,mBAAkBD,SAC5BE,cAAA,KAAG4B,KAAK,kBAAkB7B,UAAU,aAAYD,SAAC,qBAErDE,cAAA,MAAID,UAAU,mBAAkBD,SAC5BE,cAAA,KAAG4B,KAAK,OAAO7B,UAAU,aAAYD,SAAC,UAE1CE,cAAA,MAAID,UAAU,mBAAkBD,SAC5BE,cAAA,KAAG4B,KAAK,wBAAwB7B,UAAU,aAAYD,SAAC,iCAInEE,cAAA,OAAKD,UAAU,wBAAuBD,SAClCE,cAAA,KAAGD,UAAU,YAAWD,SAAC,8C,MCT1B+B,MAZKC,GACT,IACHlC,eAAA,OAAKG,UAAU,iBAAgBD,SAAA,CAC3BE,cAACvB,EAAM,IACPuB,cAAA,OAAKD,UAAU,eAAcD,SACzBE,cAAC8B,EAAgB,MAErB9B,cAAC0B,EAAM,O,MCwCJG,SA/CYE,IAEnBnC,eAAA,OAAKG,UAAU,YAAWD,SAAA,CACtBF,eAAA,UAAQG,UAAU,oCAAmCD,SAAA,CACjDE,cAAA,MAAID,UAAU,iBAAgBD,SAAC,oBAC/BF,eAAA,KAAGG,UAAU,uBAAsBD,SAAA,CAAC,wIACgGE,cAAA,SAAM,0IACCA,cAAA,SAAM,8IAIrJJ,eAAA,QAAMG,UAAU,YAAWD,SAAA,CACvBF,eAAA,WAASG,UAAU,wBAAuBD,SAAA,CACtCE,cAAA,MAAAF,SAAI,oCACJF,eAAA,MAAAE,SAAA,CACIF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,0BAA8B,yIAC1CF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,iCAAqC,gIACjDF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,8BAAkC,6EAGtDF,eAAA,WAASG,UAAU,wBAAuBD,SAAA,CACtCE,cAAA,MAAAF,SAAI,gCACJE,cAAA,KAAAF,SAAG,2QAEPF,eAAA,WAASG,UAAU,wBAAuBD,SAAA,CACtCE,cAAA,MAAAF,SAAI,qCACJE,cAAA,KAAAF,SAAG,yEACHF,eAAA,MAAAE,SAAA,CACIE,cAAA,MAAAF,SAAI,2BACJE,cAAA,MAAAF,SAAI,qCACJE,cAAA,MAAAF,SAAI,6GAERE,cAAA,KAAAF,SAAG,4FAEPF,eAAA,WAASG,UAAU,wBAAuBD,SAAA,CACtCE,cAAA,MAAAF,SAAI,yCACJE,cAAA,KAAAF,SAAG,sTAEPF,eAAA,WAASG,UAAU,wBAAuBD,SAAA,CACtCE,cAAA,MAAAF,SAAI,oFACJE,cAAA,KAAAF,SAAG,6E,MCqDR+B,SA7F0BG,KACrC,MAAOC,EAAMC,GAAWlD,mBAAwB,MAGhDG,qBAAU,KACgBgD,WAClB,MAAM/C,EAAQC,aAAaC,QAAQ,SACnC,GAAIF,EACA,IACI,MAAMgD,EAAeC,KAAKC,MAAMC,KAAKnD,EAAMoD,MAAM,KAAK,KACtDN,EAAQE,EAAaH,KACzB,CAAE,MAAOQ,GACLC,QAAQD,MAAM,wBAAyBA,GACvCP,EAAQ,KACZ,MAEAA,EAAQ,KACZ,EAGJS,EAAe,GAChB,IAOH,OACI/C,eAAA,OAAKG,UAAU,4BAA2BD,SAAA,CAErCmC,GACGrC,eAAA,OAAKG,UAAU,sBAAsB6C,MAAO,wBAAwBX,IAAOnC,SAAA,CAAC,iBAC1DE,cAAA,UAAAF,SAASmC,OAI/BrC,eAAA,UAAQG,UAAU,mBAAkBD,SAAA,CAChCE,cAAA,MAAAF,SAAI,yBACJE,cAAA,KAAAF,SAAG,uDAEPE,cAAA,QAAMD,UAAU,YAAWD,SACvBF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,+BACJF,eAAA,OAAKG,UAAU,qBAAoBD,SAAA,CAE/BF,eAAA,OAAKG,UAAU,SAAQD,SAAA,CACnBF,eAAA,OAAKG,UAAU,iBAAgBD,SAAA,CAC3BE,cAAA,MAAAF,SAAI,yBACJE,cAAA,KAAAF,SAAG,mIAEPE,cAAA,KAAG4B,KAAK,wBAAwB7B,UAAU,YAAWD,SAAC,iBAM1DF,eAAA,OAAKG,UAAU,SAAQD,SAAA,CACnBF,eAAA,OAAKG,UAAU,iBAAgBD,SAAA,CAC3BE,cAAA,MAAAF,SAAI,gCACJE,cAAA,KAAAF,SAAG,2HAEPE,cAAA,KAAG4B,KAAK,+BAA+B7B,UAAU,YAAWD,SAAC,iBAMjEF,eAAA,OAAKG,UAAU,SAAQD,SAAA,CACnBF,eAAA,OAAKG,UAAU,iBAAgBD,SAAA,CAC3BE,cAAA,MAAAF,SAAI,6BACJE,cAAA,KAAAF,SAAG,8EAEG,aAATmC,GAAgC,kBAATA,EACpBjC,cAAA,KAAG4B,KAAK,4BAA4B7B,UAAU,YAAWD,SAAC,cAI1DE,cAAA,UACID,UAAU,qBACVY,QAxDDkC,KAC3BC,MAAM,+EAA+E,EAuDzBhD,SACnC,4BAQnB,ICzFd,MAAMiD,EAAsC,CACxC,EAAG,CAAC,QAAS,+BAAgC,2DAA4D,uFAAwF,gFACjM,EAAG,CAAC,QAAS,iCAAkC,iDAAkD,2EAA4E,sEAC7K,EAAG,CAAC,QAAS,4BAA6B,sGAAuG,kFAAmF,iEACpO,EAAG,CAAC,QAAS,gCAAiC,gDAAiD,uFAAwF,6DACvL,EAAG,CAAC,QAAS,kBAAmB,gDAAiD,mFAAoF,4DACrK,EAAG,CAAC,QAAS,gCAAiC,0DAA2D,qFAAsF,0DAC/L,EAAG,CAAC,QAAS,0BAA2B,mDAAoD,qEAAsE,uCAClK,EAAG,CAAC,QAAS,uBAAwB,wDAAyD,2CAA4C,yDAC1I,EAAG,CAAC,QAAS,wBAAyB,iDAAkD,uDAAwD,4FAChJ,GAAI,CAAC,QAAS,8BAA+B,0CAA2C,oFAAqF,wEAG3KC,EAA8B,CAChC,0PASA,4NAQA,wPAQA,oOASA,6MAQA,oMAOA,qLAOA,mMAOA,yMAOA,+OAsGWnB,SA7FyBoB,IAahCrD,eAAA,OAAKG,UAAU,2BAA0BD,SAAA,CACrCF,eAAA,UAAQG,UAAU,mBAAkBD,SAAA,CAChCE,cAAA,MAAAF,SAAI,wBACJE,cAAA,KAAAF,SAAG,kGAEPF,eAAA,QAAMG,UAAU,YAAWD,SAAA,CACvBF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACvCE,cAAA,MAAID,UAAU,OAAMD,SAAC,uCACrBE,cAAA,KAAGD,UAAU,OAAMD,SAAC,wLAIpBF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAClBF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAAC,sBACfE,cAAA,UAAAF,SAAQ,gCAAoC,oDAElDF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAAC,gBAChBE,cAAA,UAAAF,SAAQ,wBAA4B,wEAEzCF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAAC,gBAChBE,cAAA,UAAAF,SAAQ,wBAA4B,qEACvCF,eAAA,MAAIG,UAAU,YAAWD,SAAA,CACvBF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAACE,cAAA,UAAAF,SAAQ,WAAe,yGAC5CF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAACE,cAAA,UAAAF,SAAQ,qBAAyB,+EACtDF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAACE,cAAA,UAAAF,SAAQ,gBAAoB,4EACjDF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAACE,cAAA,UAAAF,SAAQ,iBAAqB,0FAGtDF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAAC,gBAChBE,cAAA,UAAAF,SAAQ,uBAA2B,8DACtCE,cAAA,KAAGD,UAAU,YAAWD,SAAC,4HAGzBF,eAAA,MAAIG,UAAU,OAAMD,SAAA,CAClBF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,cAAkB,8DAC9BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,WAAe,6EAC3BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,YAAgB,uFAKpBF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,8DACJE,cAAA,KAAAF,SAAG,yGACHE,cAAA,OAAKD,UAAU,MAAKD,SACfoD,OAAOC,QAAQJ,GAAWK,KAAIC,IAAA,IAAE5C,EAAI6C,GAAGD,EAAA,OACpCrD,cAAA,OAAKD,UAAU,gBAAeD,SAC1BE,cAAA,UAAQD,UAAU,gCAAgCY,QAASA,IA3DnEF,KAChB,MAAM8C,EAAOR,EAAUtC,GACjB+C,EAAM,CAAC,uDAAwDD,EAAKE,KAAK,MAAMA,KAAK,MACpFC,EAAO,IAAIC,KAAK,CAACH,GAAM,CAAEhD,KAAM,4BAC/BoD,EAAMC,IAAIC,gBAAgBJ,GAC1BK,EAAOC,SAASC,cAAc,KACpCF,EAAKG,aAAa,OAAQN,GAC1BG,EAAKG,aAAa,WAAY,GAAGX,EAAK,oBACtCQ,EAAKI,OAAO,EAmD6EC,CAAWC,OAAO5D,IAAKX,SACnFwD,EAAG,MAFwB7C,EAI9B,SAKlBb,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,qDACJE,cAAA,KAAAF,SAAG,oGACHE,cAAA,OAAAF,SACCkD,EAAkBI,KAAI,CAACkB,EAAMC,IAC1B3E,eAAA,OAAKG,UAAU,yBAAwBD,SAAA,CAC7DE,cAAA,OAAKD,UAAU,8BAA6BD,SAC1CE,cAAA,QAAAF,SAAOwE,MAETtE,cAAA,UACEW,QAASA,IAAM6D,UAAUC,UAAUC,UAAUJ,GAC7CvE,UAAU,qDACVI,MAAO,CAAEwE,IAAK,OAAQC,MAAO,QAAS9E,SACvC,2BCkMY+B,SAjXiCgD,IA0BxCjF,eAAA,OAAKG,UAAU,mCAAkCD,SAAA,CAC7CF,eAAA,UAAQG,UAAU,mBAAkBD,SAAA,CAChCE,cAAA,MAAAF,SAAI,oCACJE,cAAA,KAAGD,UAAU,OAAMD,SAAC,+GAExBF,eAAA,QAAMG,UAAU,YAAWD,SAAA,CACvBF,eAAA,OAAKG,UAAU,OAAMD,SAAA,CACjBE,cAAA,MAAAF,SAAI,+BACJF,eAAA,MAAAE,SAAA,CACIE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,kBAAiB9B,SAAC,kCAC9BE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,sBAAqB9B,SAAC,sCAClCE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,uBAAsB9B,SAAC,uCACnCE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,aAAY9B,SAAC,2CAGjCF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAIS,GAAG,iBAAiBV,UAAU,OAAMD,SAAC,gCAC7DF,eAAA,KAAAE,SAAA,CAAGE,cAAA,UAAAF,SAAQ,mCAAkC,iPAE7CE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,6CACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,6CACJE,cAAA,MAAAF,SAAI,gDACJE,cAAA,MAAAF,SAAI,gDACJE,cAAA,MAAAF,SAAI,sFAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,oDACXF,eAAA,MAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,6BAAiC,iGAC7CF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,uBAA2B,mGACvCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,uBAA2B,wEACvCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,mBAAuB,2DACnCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,iBAAqB,0DACjCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,+BAAmC,sEAGjDE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,2CACXF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACrCE,cAAA,SAAAF,SACEF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,SACJE,cAAA,MAAAF,SAAI,qBAGRF,eAAA,SAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,kBAAkBE,cAAA,MAAAF,SAAI,sEAC9BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,mBAAmBE,cAAA,MAAAF,SAAI,wEAC/BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,uBAAuBE,cAAA,MAAAF,SAAI,iEACnCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,uBAAuBE,cAAA,MAAAF,SAAI,qDACnCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,wBAAwBE,cAAA,MAAAF,SAAI,6DACpCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,sBAAsBE,cAAA,MAAAF,SAAI,mDAClCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,0BAA0BE,cAAA,MAAAF,SAAI,gEACtCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,uBAAuBE,cAAA,MAAAF,SAAI,gFAIvCE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,gDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,+DACJE,cAAA,MAAAF,SAAI,6BACJE,cAAA,MAAAF,SAAI,sDACJE,cAAA,MAAAF,SAAI,0BAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,mDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,kCACJE,cAAA,MAAAF,SAAI,qDACJE,cAAA,MAAAF,SAAI,4BACJE,cAAA,MAAAF,SAAI,2CAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,oDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,uCACJE,cAAA,MAAAF,SAAI,4CACJE,cAAA,MAAAF,SAAI,+CACJE,cAAA,MAAAF,SAAI,wCACJE,cAAA,MAAAF,SAAI,4CACJE,cAAA,MAAAF,SAAI,+DAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,mDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,yBACJE,cAAA,MAAAF,SAAI,kBACJE,cAAA,MAAAF,SAAI,qBACJE,cAAA,MAAAF,SAAI,sBACJE,cAAA,MAAAF,SAAI,mBACJE,cAAA,MAAAF,SAAI,qBACJE,cAAA,MAAAF,SAAI,uBAIUF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAIS,GAAG,qBAAqBV,UAAU,OAAMD,SAAC,oCACjEF,eAAA,KAAAE,SAAA,CAAGE,cAAA,UAAAF,SAAQ,gCAAoC,uUAE/CE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,iDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,uCACJE,cAAA,MAAAF,SAAI,yBACJE,cAAA,MAAAF,SAAI,uDACJE,cAAA,MAAAF,SAAI,0BACJE,cAAA,MAAAF,SAAI,6BAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,gDACXF,eAAA,MAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,iCAAqC,qFACjDF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,+BAAmC,kFAC/CF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,wBAA4B,wFACxCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,mBAAuB,wDACnCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,UAAAF,SAAQ,oBAAwB,+DAGtCE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,+CACXF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACrCE,cAAA,SAAAF,SACEF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,SACJE,cAAA,MAAAF,SAAI,iBAGRF,eAAA,SAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,iBAAiBE,cAAA,MAAAF,SAAI,0DAC7BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,wBAAwBE,cAAA,MAAAF,SAAI,oDACpCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,uBAAuBE,cAAA,MAAAF,SAAI,iEACnCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,uBAAuBE,cAAA,MAAAF,SAAI,6DACnCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,kBAAkBE,cAAA,MAAAF,SAAI,4EAC9BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,eAAeE,cAAA,MAAAF,SAAI,yCAC3BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,gBAAgBE,cAAA,MAAAF,SAAI,4EAC5BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,wBAAwBE,cAAA,MAAAF,SAAI,+EAIxCE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,oDACXF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACrCE,cAAA,SAAAF,SACEF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,SACJE,cAAA,MAAAF,SAAI,aACJE,cAAA,MAAAF,SAAI,0BAGRF,eAAA,SAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,aAAaE,cAAA,MAAAF,SAAI,mBAAmBE,cAAA,MAAAF,SAAI,4BAChDF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,YAAYE,cAAA,MAAAF,SAAI,uBAAuBE,cAAA,MAAAF,SAAI,kBACnDF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,eAAeE,cAAA,MAAAF,SAAI,8BAA8BE,cAAA,MAAAF,SAAI,gCAC7DF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,WAAWE,cAAA,MAAAF,SAAI,0BAA0BE,cAAA,MAAAF,SAAI,gBACrDF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,iBAAiBE,cAAA,MAAAF,SAAI,wBAAwBE,cAAA,MAAAF,SAAI,YACzDF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,WAAWE,cAAA,MAAAF,SAAI,0BAA0BE,cAAA,MAAAF,SAAI,cACrDF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,YAAYE,cAAA,MAAAF,SAAI,gBAAgBE,cAAA,MAAAF,SAAI,0BAC5CF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,aAAaE,cAAA,MAAAF,SAAI,0BAA0BE,cAAA,MAAAF,SAAI,4BAI3DE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,yDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,6DACJE,cAAA,MAAAF,SAAI,gDACJE,cAAA,MAAAF,SAAI,oCACJE,cAAA,MAAAF,SAAI,yCACJE,cAAA,MAAAF,SAAI,gDACJE,cAAA,MAAAF,SAAI,4EAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,sDACXF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACrCE,cAAA,SAAAF,SACEF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,mBACJE,cAAA,MAAAF,SAAI,4BAGRF,eAAA,SAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,4CAA4CE,cAAA,MAAAF,SAAI,iDACxDF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,gDAAgDE,cAAA,MAAAF,SAAI,kDAC5DF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,4BAA4BE,cAAA,MAAAF,SAAI,8CAI5CE,cAAA,OAAAF,SACAE,cAAA,QAAAF,SACC,mcAgBDE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,oDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,mBACJE,cAAA,MAAAF,SAAI,+BACJE,cAAA,MAAAF,SAAI,+BACJE,cAAA,MAAAF,SAAI,wCAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,iCACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,4BACJE,cAAA,MAAAF,SAAI,sDACJE,cAAA,MAAAF,SAAI,+BACJE,cAAA,MAAAF,SAAI,qCAIUF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAIS,GAAG,sBAAsBV,UAAU,OAAMD,SAAC,qCAClEF,eAAA,KAAAE,SAAA,CAAGE,cAAA,UAAAF,SAAQ,iCAAqC,iTAEhDE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,qDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,kDACJE,cAAA,MAAAF,SAAI,qDACJE,cAAA,MAAAF,SAAI,iDACJE,cAAA,MAAAF,SAAI,qCACJE,cAAA,MAAAF,SAAI,8DAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,gDACXF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACrCE,cAAA,SAAAF,SACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,SAASE,cAAA,MAAAF,SAAI,iBAEvBF,eAAA,SAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,iBAAiBE,cAAA,MAAAF,SAAI,8DAC7BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,mBAAmBE,cAAA,MAAAF,SAAI,iEAC/BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,kBAAkBE,cAAA,MAAAF,SAAI,4DAC9BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,sBAAsBE,cAAA,MAAAF,SAAI,2EAClCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,wBAAwBE,cAAA,MAAAF,SAAI,qEACpCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,mBAAmBE,cAAA,MAAAF,SAAI,wFAInCE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,2CACXF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACrCE,cAAA,SAAAF,SACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,WAAWE,cAAA,MAAAF,SAAI,0BAEzBF,eAAA,SAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,kBAAkBE,cAAA,MAAAF,SAAI,0CAC9BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,eAAeE,cAAA,MAAAF,SAAI,wDAC3BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,qBAAqBE,cAAA,MAAAF,SAAI,iDACjCF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,YAAYE,cAAA,MAAAF,SAAI,0CACxBF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,eAAeE,cAAA,MAAAF,SAAI,qCAC3BF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,2BAA2BE,cAAA,MAAAF,SAAI,oDAI3CE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,qDACXF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACrCE,cAAA,SAAAF,SACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,SAASE,cAAA,MAAAF,SAAI,aAAaE,cAAA,MAAAF,SAAI,0BAExCF,eAAA,SAAAE,SAAA,CACEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,WAAWE,cAAA,MAAAF,SAAI,kCAAkCE,cAAA,MAAAF,SAAI,kCAC7DF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,eAAeE,cAAA,MAAAF,SAAI,yCAAyCE,cAAA,MAAAF,SAAI,sCACxEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,YAAYE,cAAA,MAAAF,SAAI,oCAAoCE,cAAA,MAAAF,SAAI,wBAChEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,WAAWE,cAAA,MAAAF,SAAI,qCAAqCE,cAAA,MAAAF,SAAI,YAChEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,OAAOE,cAAA,MAAAF,SAAI,yCAAyCE,cAAA,MAAAF,SAAI,wBAChEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,eAAeE,cAAA,MAAAF,SAAI,oCAAoCE,cAAA,MAAAF,SAAI,uCACnEF,eAAA,MAAAE,SAAA,CAAIE,cAAA,MAAAF,SAAI,cAAcE,cAAA,MAAAF,SAAI,0CAA0CE,cAAA,MAAAF,SAAI,wCAI5EE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,2DACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,oDACJE,cAAA,MAAAF,SAAI,uCACJE,cAAA,MAAAF,SAAI,kEAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,iDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,0BACJE,cAAA,MAAAF,SAAI,iBACJE,cAAA,MAAAF,SAAI,qBACJE,cAAA,MAAAF,SAAI,4BACJE,cAAA,MAAAF,SAAI,6BACJE,cAAA,MAAAF,SAAI,oCAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,iDACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,kCACJE,cAAA,MAAAF,SAAI,0DACJE,cAAA,MAAAF,SAAI,8DACJE,cAAA,MAAAF,SAAI,gDAGNE,cAAA,KAAAF,SAAGE,cAAA,UAAAF,SAAQ,kCACXF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAI,wCACJE,cAAA,MAAAF,SAAI,gCACJE,cAAA,MAAAF,SAAI,kDACJE,cAAA,MAAAF,SAAI,wCACJE,cAAA,MAAAF,SAAI,kDAINF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACvBE,cAAA,MAAIS,GAAG,YAAYV,UAAU,OAAMD,SAAC,mCACpCF,eAAA,MAAAE,SAAA,CACEE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,6CAA6CkD,OAAO,SAASC,IAAI,sBAAqBjF,SAAC,yCACnGE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,0CAA0CkD,OAAO,SAASC,IAAI,sBAAqBjF,SAAC,6BAChGE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,2BAA2BkD,OAAO,SAASC,IAAI,sBAAqBjF,SAAC,+BACjFE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,4BAA4BkD,OAAO,SAASC,IAAI,sBAAqBjF,SAAC,8BAClFE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,0BAA0BkD,OAAO,SAASC,IAAI,sBAAqBjF,SAAC,wCAChFE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,yCAAyCkD,OAAO,SAASC,IAAI,sBAAqBjF,SAAC,kCAC/FE,cAAA,MAAAF,SAAIE,cAAA,KAAG4B,KAAK,0CAA0CkD,OAAO,SAASC,IAAI,sBAAqBjF,SAAC,mE,uBC1KrFkF,MAhLoBA,KAE/B,MAAOC,EAAaC,GAAkBlG,mBAAS,KACxCmG,EAAgBC,GAAqBpG,mBAAS,KAC9CqG,EAAeC,GAAoBtG,mBAAS,KAG5CuG,EAAaC,GAAkBxG,mBAAS,KACxCyG,EAAgBC,GAAqB1G,mBAAS,KAC9CiD,EAAMC,GAAWlD,mBAAS,aAC1B2G,EAAeC,GAAoB5G,mBAAS,IAE7CJ,EAAWC,cA4DjB,OACIe,eAAA,OAAKG,UAAU,qBAAoBD,SAAA,CAC/BF,eAAA,UAAQG,UAAU,mBAAkBD,SAAA,CAChCE,cAAA,MAAAF,SAAI,sBACJE,cAAA,KAAAF,SAAG,8CAEPE,cAAA,QAAMD,UAAU,YAAWD,SACvBF,eAAA,OAAKG,UAAU,6BAA4BD,SAAA,CAEvCE,cAAA,OAAKD,UAAU,WAAUD,SACrBE,cAAA,OAAKD,UAAU,kBAAiBD,SAC5BF,eAAA,OAAKG,UAAU,YAAWD,SAAA,CACtBE,cAAA,MAAID,UAAU,aAAYD,SAAC,YAC3BF,eAAA,QAAMiG,SAzCb1D,UACjB2D,EAAEC,iBAEF,IACI,MAAMC,QAAiBC,IAAMC,KACzB,+BACA,CAAEC,MAAOlB,EAAamB,SAAUjB,IAIpC9F,aAAagH,QAAQ,QAASL,EAASzC,KAAKnE,OAE5CkG,EAAiB,qBACjB5C,QAAQ4D,IAAI,sBAAuBN,EAASzC,MAG5CgD,YAAW,KACP3H,EAAS,IAAI,GACd,IACP,CAAE,MAAO6D,GAC2B,IAAD+D,EAAAC,EAA/B,GAAIR,IAAMS,aAAajE,GACnB6C,GAA+B,QAAdkB,EAAA/D,EAAMuD,gBAAQ,IAAAQ,GAAM,QAANC,EAAdD,EAAgBjD,YAAI,IAAAkD,OAAN,EAAdA,EAAsBE,UAAW,0BAElDrB,EAAiB,+BAEzB,GAgBqDxF,SAAA,CACzBF,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACvBE,cAAA,SAAO4G,QAAQ,eAAc9G,SAAC,UAC9BE,cAAA,SACIQ,KAAK,QACLT,UAAU,eACVU,GAAG,eACHoG,MAAO5B,EACP6B,SAAWhB,GAAMZ,EAAeY,EAAEhB,OAAO+B,OACzCE,YAAY,mBACZC,UAAQ,OAGhBpH,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACvBE,cAAA,SAAO4G,QAAQ,kBAAiB9G,SAAC,aACjCE,cAAA,SACIQ,KAAK,WACLT,UAAU,eACVU,GAAG,kBACHoG,MAAO1B,EACP2B,SAAWhB,GAAMV,EAAkBU,EAAEhB,OAAO+B,OAC5CE,YAAY,sBACZC,UAAQ,OAGhBhH,cAAA,UAAQQ,KAAK,SAAST,UAAU,4BAA2BD,SAAC,eAI/DuF,GAAiBrF,cAAA,KAAGD,UAAU,mBAAkBD,SAAEuF,WAM/DrF,cAAA,OAAKD,UAAU,WAAUD,SACrBE,cAAA,OAAKD,UAAU,mBAAkBD,SAC7BF,eAAA,OAAKG,UAAU,YAAWD,SAAA,CACtBE,cAAA,MAAID,UAAU,aAAYD,SAAC,YAC3BF,eAAA,QAAMiG,SA7Gb1D,UACjB2D,EAAEC,iBAEF,IACI,MAAMC,QAAiBC,IAAMC,KACzB,+BACA,CAAEC,MAAOZ,EAAaa,SAAUX,EAAgBxD,SAIpD5C,aAAagH,QAAQ,QAASL,EAASzC,KAAKnE,OAE5CwG,EAAiB,mCAAmCI,EAASzC,KAAKtB,QAClES,QAAQ4D,IAAI,sBAAuBN,EAASzC,MAG5CgD,YAAW,KACP3H,EAAS,IAAI,GACd,IACP,CAAE,MAAO6D,GAC2B,IAADwE,EAAAC,EAA/B,GAAIjB,IAAMS,aAAajE,GACnBmD,GAA+B,QAAdqB,EAAAxE,EAAMuD,gBAAQ,IAAAiB,GAAM,QAANC,EAAdD,EAAgB1D,YAAI,IAAA2D,OAAN,EAAdA,EAAsBP,UAAW,0BAElDf,EAAiB,+BAEzB,GAoFqD9F,SAAA,CACzBF,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACvBE,cAAA,SAAO4G,QAAQ,eAAc9G,SAAC,UAC9BE,cAAA,SACIQ,KAAK,QACLT,UAAU,eACVU,GAAG,eACHoG,MAAOtB,EACPuB,SAAWhB,GAAMN,EAAeM,EAAEhB,OAAO+B,OACzCE,YAAY,mBACZC,UAAQ,OAGhBpH,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACvBE,cAAA,SAAO4G,QAAQ,kBAAiB9G,SAAC,aACjCE,cAAA,SACIQ,KAAK,WACLT,UAAU,eACVU,GAAG,kBACHoG,MAAOpB,EACPqB,SAAWhB,GAAMJ,EAAkBI,EAAEhB,OAAO+B,OAC5CE,YAAY,sBACZC,UAAQ,OAGhBpH,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACvBE,cAAA,SAAO4G,QAAQ,cAAa9G,SAAC,SAC7BF,eAAA,UACIG,UAAU,eACVU,GAAG,cACHoG,MAAO5E,EACP6E,SAAWhB,GAAM5D,EAAQ4D,EAAEhB,OAAO+B,OAAO/G,SAAA,CAEzCE,cAAA,UAAQ6G,MAAM,WAAU/G,SAAC,aACzBE,cAAA,UAAQ6G,MAAM,gBAAe/G,SAAC,kBAC9BE,cAAA,UAAQ6G,MAAM,gBAAe/G,SAAC,wBAGtCE,cAAA,UAAQQ,KAAK,SAAST,UAAU,4BAA2BD,SAAC,eAI/D6F,GAAiB3F,cAAA,KAAGD,UAAU,mBAAkBD,SAAE6F,kBAMrE,E,MC/JCwB,MAdcA,KACzB,MAAMvI,EAAWC,cAMjB,OACImB,cAAA,UAAQD,UAAU,cAAcY,QALhByG,KAChBxI,EAAS,wBAAwB,EAIoBkB,SAAC,QAE7C,ECuGF+B,SA/G0BwF,KACrC,MAAOzD,EAAK0D,GAAUtI,mBAAS,KACxB+D,EAAWwE,GAAgBvI,mBAAmB,KAC9CyD,EAAO+E,GAAYxI,mBAAS,KAC5BiD,EAAMC,GAAWlD,mBAAwB,MAC1CJ,EAAWC,cAGjBM,qBAAU,KACN,MAAMC,EAAQC,aAAaC,QAAQ,SACnC,GAAKF,EAKL,IACI,MAAMgD,EAAeC,KAAKC,MAAMC,KAAKnD,EAAMoD,MAAM,KAAK,KACtDN,EAAQE,EAAaH,MAEK,aAAtBG,EAAaH,MAA6C,kBAAtBG,EAAaH,MAAiD,aAAtBG,EAAaH,OACzFa,MAAM,0EACNlE,EAAS,KAEjB,CAAE,MAAO6D,GACLC,QAAQD,MAAM,wBAAyBA,GACvC7D,EAAS,iBACb,MAfIA,EAAS,iBAeb,GACD,CAACA,IA2CJ,OACIgB,eAAA,OAAKG,UAAU,4BAA2BD,SAAA,CACtCF,eAAA,UAAQG,UAAU,mBAAkBD,SAAA,CAChCE,cAAA,MAAAF,SAAI,yBACJE,cAAA,KAAAF,SAAG,mIAEPF,eAAA,QAAMG,UAAU,YAAWD,SAAA,CACvBF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,cACJF,eAAA,OAAKG,UAAU,aAAYD,SAAA,CACvBE,cAAA,SACIQ,KAAK,OACLT,UAAU,eACVgH,YAAY,gCACZF,MAAOjD,EACPkD,SAAWhB,GAAMwB,EAAOxB,EAAEhB,OAAO+B,SAErC7G,cAAA,UAAQD,UAAU,uBAAuBY,QA1DvCwB,UAIlB,GAHAqF,EAAS,IACTD,EAAa,KAER3D,EAED,YADA4D,EAAS,6BAIb,MAAMpI,EAAQC,aAAaC,QAAQ,SACnC,GAAKF,EAKL,IACI,MAAM4G,QAAiByB,MAAM,wCAAyC,CAClEC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChBC,cAAe,UAAUxI,KAE7ByI,KAAMxF,KAAKyF,UAAU,CAAElE,UAG3B,IAAKoC,EAAS+B,GAAI,CACd,MAAMC,QAAkBhC,EAASiC,OACjC,MAAM,IAAIC,MAAMF,EAAUrB,SAAW,6BACzC,CAEA,MAAMpD,QAAayC,EAASiC,OAC5BV,EAAahE,EAAKR,WAAa,GACnC,CAAE,MAAOoF,GACDA,aAAeD,MACfV,EAASW,EAAIxB,SAEba,EAAS,wDAEjB,MA3BIA,EAAS,0CA2Bb,EAoBgF1H,SAAC,eAIpE2C,GAASzC,cAAA,KAAGD,UAAU,mBAAkBD,SAAE2C,OAE/C7C,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,yBACHiD,EAAUqF,OAAS,EAChBpI,cAAA,MAAAF,SACKiD,EAAUK,KAAI,CAACiF,EAAU9D,IACtBvE,cAAA,MAAAF,SAAiBuI,GAAR9D,OAIjBvE,cAAA,KAAAF,SAAG,uCAIfE,cAACmH,EAAU,MACT,I,gBCoHCtF,SA/NiCyG,KAC5C,MAAOC,EAAOC,GAAYxJ,mBAAsB,OACzC+D,EAAWwE,GAAgBvI,mBAAmB,KAC9CyD,EAAO+E,GAAYxI,mBAAS,KAC5ByJ,EAASC,GAAc1J,oBAAS,GAoBjC2J,EAAgBxG,UAKlB,GAJAqF,EAAS,IACTD,EAAa,IACbmB,GAAW,IAENH,EAGD,OAFAf,EAAS,oCACTkB,GAAW,GAIf,MAAMtJ,EAAQC,aAAaC,QAAQ,SACnC,IAAKF,EAGD,OAFAoI,EAAS,uDACTkB,GAAW,GAIf,MAAME,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAASP,GAEzB,IACI,MAAMvC,QAAiByB,MAAM,+CAAgD,CACzEC,OAAQ,OACRC,QAAS,CACLC,cAAe,UAAUxI,KAE7ByI,KAAMe,IAGV,IAAK5C,EAAS+B,GAAI,CACd,GAAwB,MAApB/B,EAAS+C,OACT,MAAM,IAAIb,MAAM,sCACb,GAAwB,MAApBlC,EAAS+C,OAChB,MAAM,IAAIb,MAAM,yCACb,CACH,MAAMF,QAAkBhC,EAASiC,OACjC,MAAM,IAAIC,MAAMF,EAAUrB,SAAW,oCACzC,CACJ,CAEA,MAAMpD,QAAayC,EAASiC,OAC5BV,EAAahE,EAAKR,WAAa,GACnC,CAAE,MAAOoF,GACDA,aAAeD,MACfV,EAASW,EAAIxB,SAEba,EAAS,+DAEjB,CAAC,QACGkB,GAAW,EACf,GAIEM,EAAgBC,IAClB,GAAyB,IAArBlG,EAAUqF,OAEV,YADAZ,EAAS,wCAIb,IAAI0B,EAAU,GACVC,EAAW,GACXC,EAAgB,GAEpB,OAAQH,GACJ,IAAK,MACDC,EAAUnG,EAAUU,KAAK,MACzB0F,EAAW,aACXC,EAAgB,MAChB,MACJ,IAAK,MACDF,EAAUnG,EAAUK,KAAI,CAACiF,EAAU9D,IAAU,GAAGA,EAAQ,KAAK8D,MAAY5E,KAAK,MAC9E0F,EAAW,WACXC,EAAgB,MAChB,MACJ,IAAK,OACDF,EAAU7G,KAAKyF,UAAU/E,EAAW,KAAM,GAC1CoG,EAAW,mBACXC,EAAgB,OAChB,MACJ,IAAK,MACDF,EAAU,cAAcnG,EAAUK,KAAIE,GAAM,aAAaA,iBAAiBG,KAAK,kBAC/E0F,EAAW,kBACXC,EAAgB,MAChB,MACJ,QAEI,YADA5B,EAAS,4BAIjB,MAAM9D,EAAO,IAAIC,KAAK,CAACuF,GAAU,CAAE1I,KAAM2I,IACnCpF,EAAOC,SAASC,cAAc,KACpCF,EAAKnC,KAAOiC,IAAIC,gBAAgBJ,GAChCK,EAAKsF,SAAW,cAAcD,IAC9BrF,EAAKI,OAAO,EAGhB,OACIvE,eAAA,OAAKG,UAAU,mCAAkCD,SAAA,CAC7CF,eAAA,UAAQG,UAAU,mBAAkBD,SAAA,CAChCE,cAAA,MAAAF,SAAI,0CACJE,cAAA,KAAAF,SAAG,oFAEPF,eAAA,QAAMG,UAAU,YAAWD,SAAA,CACvBF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,sBACJE,cAAA,SACIQ,KAAK,OACL8I,OAAO,UACPxC,SA/HOyC,IACvB,GAAIA,EAAMzE,OAAO0E,OAASD,EAAMzE,OAAO0E,MAAM,GAAI,CAC7C,MAAMC,EAAOF,EAAMzE,OAAO0E,MAAM,GAChC,IAAK,CAAC,YAAa,aAAc,aAAaE,SAASD,EAAKjJ,MAExD,YADAgH,EAAS,yDAGb,GAAIiC,EAAKE,KAAO,QAEZ,YADAnC,EAAS,yDAGbgB,EAASiB,GACTjC,EAAS,GACb,GAmHgBzH,UAAU,oBACV,aAAW,qCAEdwI,GACG3I,eAAA,OAAKG,UAAU,iCAAgCD,SAAA,CAC3CE,cAAA,MAAAF,SAAI,aACJE,cAAA,OACIc,IAAK+C,IAAIC,gBAAgByE,GACzBvH,IAAI,8BACJb,MAAO,CACHyJ,SAAU,OACVC,UAAW,QACXC,OAAQ,iBACRC,QAAS,QACTC,OAAQ,eAKxBhK,cAAA,UACID,UAAU,uBACVY,QAASgI,EACTsB,SAAUxB,EACV,aAAW,kCAAiC3I,SAE3C2I,EAAU,eAAiB,uBAE/BhG,GACG7C,eAAA,OAAKG,UAAU,OAAMD,SAAA,CACjBE,cAAA,KAAGD,UAAU,cAAaD,SAAE2C,IAC5BzC,cAAA,UACID,UAAU,yBACVY,QAASgI,EAAc7I,SAC1B,UAGDE,cAAA,UACID,UAAU,yBACVY,QAASA,KACL6H,EAAS,MACThB,EAAS,IACTD,EAAa,GAAG,EAClBzH,SACL,gBAMbF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,yBACHiD,EAAUqF,OAAS,EAChBxI,eAAAC,WAAA,CAAAC,SAAA,CACIF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACnCE,cAAA,SAAAF,SACIF,eAAA,MAAAE,SAAA,CACIE,cAAA,MAAAF,SAAI,MACJE,cAAA,MAAAF,SAAI,mBAGZE,cAAA,SAAAF,SACKiD,EAAUK,KAAI,CAACiF,EAAU9D,IACtB3E,eAAA,MAAAE,SAAA,CACIE,cAAA,MAAAF,SAAKyE,EAAQ,IACbvE,cAAA,MAAAF,SAAKuI,MAFA9D,UAOrB3E,eAACsK,IAAc,CAACzJ,GAAG,2BACfmC,MAAM,sBACN7C,UAAU,uBAAsBD,SAAA,CAChCE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAMqI,EAAa,OAAOlJ,SAAC,oBACnDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAMqI,EAAa,OAAOlJ,SAAC,oBACnDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAMqI,EAAa,QAAQlJ,SAAC,qBACpDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAMqI,EAAa,OAAOlJ,SAAC,0BAI3DE,cAAA,KAAAF,SAAI2C,GAAgB,2EAIhCzC,cAACmH,EAAU,MACT,ICSCtF,SApO8BwI,KACzC,MAAOtH,EAAWwE,GAAgBvI,mBAAmB,KAC9CsL,EAAqBC,GAA0BvL,mBAAgB,KAC/DyD,EAAO+E,GAAYxI,mBAAS,KAC5ByJ,EAASC,GAAc1J,oBAAS,GAkGjCwL,EAAmBvB,IACrB,GAAmC,IAA/BqB,EAAoBlC,OAEpB,YADAZ,EAAS,4BAIb,IAAI0B,EAAU,GACVC,EAAW,GACXC,EAAgB,GAEL,QAAXH,GACAC,EAAU,4BACVA,GAAWoB,EACNlH,KAAKkB,GAAS,GAAGA,EAAK+D,YAAY/D,EAAKmG,YAAYnG,EAAK9D,SACxDiD,KAAK,MACV0F,EAAW,WACXC,EAAgB,OACE,QAAXH,GACPC,EAAUoB,EACLlH,KAAKkB,GAAS,cAAcA,EAAK+D,uBAAuB/D,EAAKmG,mBAAmBnG,EAAK9D,WACrFiD,KAAK,MACV0F,EAAW,aACXC,EAAgB,OACE,SAAXH,GACPC,EAAU7G,KAAKyF,UAAUwC,EAAqB,KAAM,GACpDnB,EAAW,mBACXC,EAAgB,QACE,QAAXH,IACPC,EAAU,wDACVA,GAAWoB,EACNlH,KACIkB,GACG,kCAAkCA,EAAK+D,yCAAyC/D,EAAKmG,kCAAkCnG,EAAK9D,+BAEnIiD,KAAK,MACVyF,GAAW,iBACXC,EAAW,kBACXC,EAAgB,OAGpB,MAAM1F,EAAO,IAAIC,KAAK,CAACuF,GAAU,CAAE1I,KAAM2I,IACnCpF,EAAOC,SAASC,cAAc,KACpCF,EAAKnC,KAAOiC,IAAIC,gBAAgBJ,GAChCK,EAAKsF,SAAW,yBAAyBD,IACzCrF,EAAKI,OAAO,EAGhB,OACIvE,eAAA,OAAKG,UAAU,gCAA+BD,SAAA,CAC1CF,eAAA,UAAQG,UAAU,mBAAkBD,SAAA,CAChCE,cAAA,MAAAF,SAAI,6BACJE,cAAA,KAAAF,SAAG,8EAEPF,eAAA,QAAMG,UAAU,YAAWD,SAAA,CACvBF,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,+BACJE,cAAA,SACIQ,KAAK,OACL8I,OAAO,YACPxC,SA1JK3E,UAErB,GADAqF,EAAS,IACL+B,EAAMzE,OAAO0E,OAASD,EAAMzE,OAAO0E,MAAM,GAAI,CAC7C,MAAMC,EAAOF,EAAMzE,OAAO0E,MAAM,GAChC,IAAKC,EAAKiB,KAAKC,SAAS,UAAYlB,EAAKiB,KAAKC,SAAS,QAEnD,YADAnD,EAAS,yDAIb,MAAMoB,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQW,GAExB,IACIf,GAAW,GACX,MAAM1C,QAAiByB,MAAM,gDAAiD,CAC1EC,OAAQ,OACRG,KAAMe,IAGV,IAAK5C,EAAS+B,GAAI,CACd,MAAMC,QAAkBhC,EAASiC,OACjC,MAAM,IAAIC,MAAMF,EAAUrB,SAAW,iCACzC,CAEA,MAAMpD,QAAayC,EAASiC,OAC5BsC,EAAuBhH,EAAK+G,qBAAuB,GACvD,CAAE,MAAOnC,GACLX,EAASW,aAAeD,MAAQC,EAAIxB,QAAU,gCAClD,CAAC,QACG+B,GAAW,EACf,CACJ,GA4HgB3I,UAAU,oBACV,aAAW,qDAEfC,cAAA,YACID,UAAU,oBACV6K,KAAM,EACN7D,YAAY,6CACZ8D,OA/HM1I,UACtB,MAAM2I,EAAQvB,EAAMzE,OAAO+B,MAC3B,GAAKiE,EAAMC,OAKX,IACIrC,GAAW,GACX,MAAM1C,QAAiByB,MAAM,gDAAiD,CAC1EC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BE,KAAMxF,KAAKyF,UAAU,CAAE/E,UAAW+H,MAGtC,IAAK9E,EAAS+B,GAAI,CACd,MAAMC,QAAkBhC,EAASiC,OACjC,MAAM,IAAIC,MAAMF,EAAUrB,SAAW,iCACzC,CAEA,MAAMpD,QAAayC,EAASiC,OAC5BsC,EAAuBhH,EAAK+G,qBAAuB,GACvD,CAAE,MAAOnC,GACLX,EAASW,aAAeD,MAAQC,EAAIxB,QAAU,gCAClD,CAAC,QACG+B,GAAW,EACf,MAvBIlB,EAAS,2BAuBb,IAuGa/E,GAASzC,cAAA,KAAGD,UAAU,mBAAkBD,SAAE2C,OAE/C7C,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBE,cAAA,MAAAF,SAAI,0BACHwK,EAAoBlC,OAAS,EAC1BxI,eAAAC,WAAA,CAAAC,SAAA,CACIF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACnCE,cAAA,SAAAF,SACIF,eAAA,MAAAE,SAAA,CACIE,cAAA,MAAAF,SAAI,cACJE,cAAA,MAAAF,SAAI,aACJE,cAAA,MAAAF,SAAI,cAGZE,cAAA,SAAAF,SACKwK,EAAoBlH,KAAI,CAACkB,EAAMC,IAC5B3E,eAAA,MAAAE,SAAA,CACIE,cAAA,MAAAF,SAAKwE,EAAK+D,WACVrI,cAAA,MAAAF,SAAKwE,EAAKmG,WACVzK,cAAA,MAAAF,SAAKwE,EAAK9D,SAHL+D,UAQrB3E,eAAA,OAAKG,UAAU,yDAAwDD,SAAA,CACnEE,cAAA,UACID,UAAU,kBACVY,QA9HJwB,UAC5B,IACI,MAAM6D,QAAiByB,MAAM,0CAA2C,CACpEC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChBC,cAAe,UAAUvI,aAAaC,QAAQ,YAElDuI,KAAMxF,KAAKyF,UAAU,CACjB/E,UAAWuH,EACXU,QAAS,iCAIjB,IAAKhF,EAAS+B,GAAI,CACd,MAAMC,QAAkBhC,EAASiC,OACjC,MAAM,IAAIC,MAAMF,EAAUrB,SAAW,2BACzC,CAEA,MACMsE,SADajF,EAASiC,QACNgD,SAGtBzL,OAAOd,SAASkD,KAAO,wBAAwBsJ,mBAAmBD,IACtE,CAAE,MAAO9C,GACLX,EAASW,aAAeD,MAAQC,EAAIxB,QAAU,gCAClD,GAqGgC,aAAW,qCAAoC7G,SAClD,4BAGDF,eAACsK,IAAc,CACXzJ,GAAG,wBACHmC,MAAM,oBACN7C,UAAU,OAAMD,SAAA,CAEhBE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAM6J,EAAgB,OAAO1K,SAAC,kBACtDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAM6J,EAAgB,OAAO1K,SAAC,kBACtDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAM6J,EAAgB,QAAQ1K,SAAC,mBACvDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAM6J,EAAgB,OAAO1K,SAAC,wBAG9DE,cAAA,OAAKD,UAAU,gBAAeD,SACtBE,cAAA,SAAOD,UAAU,kBAAiBD,SAAC,gDAI/CE,cAAA,KAAAF,SAAG,uFAIfE,cAACmH,EAAU,MACT,ICuGCtF,SAtUkBsJ,KAC7B,MAAOC,EAAWC,GAAgBrM,mBAAgB,KAC3CsM,EAAcC,GAAmBvM,mBAAwB,OACzDwM,EAAaC,GAAkBzM,mBAAgB,KAC/C0M,EAAiBC,GAAsB3M,mBAAgB,KACvD4M,EAAaC,GAAkB7M,mBAAkB,KACjD8M,EAAcC,GAAmB/M,mBAAmB,KACpDgN,EAAYC,GAAiBjN,oBAAS,IACtCkN,EAAaC,GAAkBnN,mBAAS,KACxCoN,EAAWC,GAAgBrN,oBAAS,IACpCyD,EAAO+E,GAAYxI,mBAAS,KAC5BiD,EAAMC,GAAWlD,mBAAwB,MAC1CN,EAAWC,cACXC,EAAWC,cAGXmM,EADc,IAAIsB,gBAAgB5N,EAAS6N,QACrBC,IAAI,WAGhCrN,qBAAU,KACN,MAAMC,EAAQC,aAAaC,QAAQ,SACnC,GAAKF,EAKL,IACI,MAAMgD,EAAeC,KAAKC,MAAMC,KAAKnD,EAAMoD,MAAM,KAAK,KACtDN,EAAQE,EAAaH,MAGK,aAAtBG,EAAaH,MACbS,QAAQ+J,KAAK,uCAErB,CAAE,MAAOhK,GACLC,QAAQD,MAAM,wBAAyBA,GACvC7D,EAAS,iBACb,MAfIA,EAAS,iBAeb,GACD,CAACA,IAGJ,MAwGM8N,EAAczD,IAChB,GAA2B,IAAvBuC,EAAYpD,OAEZ,YADAZ,EAAS,yBAIb,IAAI0B,EAAU,GACVC,EAAW,GACXC,EAAgB,GAEL,QAAXH,GACAC,EAAU4C,EAAarI,KAAK,KAAO,KACnCyF,GAAWsC,EAAYpI,KAAKuJ,GAAQb,EAAa1I,KAAKwJ,GAAWD,EAAIC,KAASnJ,KAAK,OAAMA,KAAK,MAC9F0F,EAAW,WACXC,EAAgB,OACE,QAAXH,GACPC,EAAUsC,EACLpI,KAAKuJ,GAAQb,EAAa1I,KAAKwJ,GAAW,GAAGA,MAAWD,EAAIC,OAAWnJ,KAAK,QAC5EA,KAAK,QACV0F,EAAW,aACXC,EAAgB,OACE,SAAXH,GACPC,EAAU7G,KAAKyF,UAAU0D,EAAa,KAAM,GAC5CrC,EAAW,mBACXC,EAAgB,QACE,QAAXH,IACPC,EAAU,wDACVA,GAAWsC,EACNpI,KACIuJ,GACG,iBAAiBb,EACZ1I,KAAKwJ,GAAW,QAAQA,KAAUD,EAAIC,OAAYA,OAClDnJ,KAAK,yBAEjBA,KAAK,MACVyF,GAAW,iBACXC,EAAW,kBACXC,EAAgB,OAGpB,MAAM1F,EAAO,IAAIC,KAAK,CAACuF,GAAU,CAAE1I,KAAM2I,IACnCpF,EAAOC,SAASC,cAAc,KACpCF,EAAKnC,KAAOiC,IAAIC,gBAAgBJ,GAChCK,EAAKsF,SAAW,iBAAiBD,IACjCrF,EAAKI,OAAO,EAIV0I,EAAgBzB,EAAU0B,QAAQrD,GACpCA,EAAKsD,cAAcrD,SAASwC,EAAYa,iBAO5C,OAJA5N,qBAAU,KA5JagD,WACnB,MAAM/C,EAAQC,aAAaC,QAAQ,SACnC,IAAKF,EAGD,OAFAoI,EAAS,kDACT6E,GAAa,GAIjB,IACIA,GAAa,GACb7E,EAAS,IAET,MAAMxB,QAAiByB,MACnB,4CAA2CuD,EAAU,YAAYA,IAAY,IAC7E,CACItD,OAAQ,MACRC,QAAS,CACLC,cAAe,UAAUxI,OAKrC,IAAK4G,EAAS+B,GAAI,CACd,MAAMC,QAAkBhC,EAASiC,OACjC,MAAM,IAAIC,MAAMF,EAAUrB,SAAW,8BACzC,CAEA,MAAMpD,QAAayC,EAASiC,OAC5BoD,EAAa9H,EAAKiG,OAAS,GAC/B,CAAE,MAAOrB,GACLX,EAASW,aAAeD,MAAQC,EAAIxB,QAAU,gCAClD,CAAC,QACG0F,GAAa,EACjB,GA4HAW,EAAgB,GACjB,CAAChC,IAGApL,eAAA,OAAKG,UAAW,2BAAmC,aAATkC,EAAsB,UAAY,IAAKnC,SAAA,CAEnE,aAATmC,GACGrC,eAAA,OACIG,UAAU,2GACVI,MAAO,CACH8M,gBAAiB,qBACjBC,OAAQ,IACVpN,SAAA,CAEFE,cAAA,MAAID,UAAU,yBAAwBD,SAAC,sBACvCF,eAAA,KAAGG,UAAU,yBAAwBD,SAAA,CAAC,oBACjBE,cAAA,UAAAF,SAAQ,eAAmB,2DAKxDF,eAAA,SAAOG,UAAU,6BAA6BI,MAAO,CAAEe,MAAO,MAAOiM,UAAW,QAASrN,SAAA,CACrFE,cAAA,MAAAF,SAAI,eACJE,cAAA,SACIQ,KAAK,OACLT,UAAU,oBACVgH,YAAY,kBACZF,MAAOqF,EACPpF,SAAWhB,GAAMqG,EAAerG,EAAEhB,OAAO+B,SAE5CuF,EACGxM,eAAA,OAAKG,UAAU,mBAAkBD,SAAA,CAC7BE,cAAA,KAAAF,SAAG,qBACHE,cAAA,OAAKD,UAAU,8BAA8BkC,KAAK,SAAQnC,SACtDE,cAAA,QAAMD,UAAU,kBAAiBD,SAAC,oBAG1C+M,EAAczE,OAAS,EACvBpI,cAAA,MAAID,UAAU,aAAYD,SACrB+M,EAAczJ,KAAKqG,GAChBzJ,cAAA,MAEID,UAAW,oBAAmBuL,IAAiB7B,EAAO,SAAW,IACjE9I,QAASA,IAnKZwB,WACrB,IACI,MAAM6D,QAAiByB,MAAM,uDAAuD2F,IAAY,CAC5F1F,OAAQ,MACRC,QAAS,CACLC,cAAe,UAAUvI,aAAaC,QAAQ,cAItD,IAAK0G,EAAS+B,GAAI,CACd,MAAMC,QAAkBhC,EAASiC,OACjC,MAAM,IAAIC,MAAMF,EAAUrB,SAAW,gCACzC,CAEA,MAAMpD,QAAayC,EAASiC,OAE5B,GAAI1E,EAAK2F,SAAW3F,EAAK2F,QAAQd,OAAS,EAAG,CACzC,MAAMT,EAAUzE,OAAOmK,KAAK9J,EAAK2F,QAAQ,IACzC6C,EAAgBpE,EACpB,CAEA8D,EAAelI,EAAK2F,SAAW,IAC/ByC,EAAmBpI,EAAK2F,SAAW,IACnCqC,EAAgB6B,EACpB,CAAE,MAAOjF,GACLX,EAASW,aAAeD,MAAQC,EAAIxB,QAAU,gCAClD,GAyIuC2G,CAAiB7D,GAChCtJ,MAAO,CAAEoN,OAAQ,WAAYzN,SAE5B2J,GALIA,OAUjBzJ,cAAA,KAAGD,UAAU,aAAYD,SAAC,mCAKlCF,eAAA,QAAMG,UAAU,oBAAoBI,MAAO,CAAEe,MAAO,OAAQpB,SAAA,CACxDF,eAAA,UAAQG,UAAU,mBAAkBD,SAAA,CAChCE,cAAA,MAAAF,SAAI,yBACH2C,GAASzC,cAAA,KAAGD,UAAU,0BAAyBD,SAAE2C,OAEtD7C,eAAA,WAASG,UAAU,OAAMD,SAAA,CACrBF,eAAA,OAAKG,UAAU,yDAAwDD,SAAA,CACnEE,cAAA,UAAQD,UAAU,oBAAoBY,QAASA,IAAMsL,GAAeD,GAAYlM,SAC3EkM,EAAa,sBAAwB,wBAE1CpM,eAACsK,IAAc,CAACzJ,GAAG,wBAAwBmC,MAAM,SAAQ9C,SAAA,CACrDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAM+L,EAAW,OAAO5M,SAAC,kBACjDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAM+L,EAAW,OAAO5M,SAAC,kBACjDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAM+L,EAAW,QAAQ5M,SAAC,mBAClDE,cAACmK,IAASC,KAAI,CAACzJ,QAASA,IAAM+L,EAAW,OAAO5M,SAAC,wBAGxD0L,EAAYpD,OAAS,EAClBxI,eAAAC,WAAA,CAAAC,SAAA,CACIF,eAAA,SAAOG,UAAU,uBAAsBD,SAAA,CACnCE,cAAA,SAAAF,SACIE,cAAA,MAAAF,SACKgM,EAAa1I,KAAKwJ,GACf5M,cAAA,MAAAF,SAAkB8M,GAATA,SAIrB5M,cAAA,SAAAF,SACK4L,EAAgBtI,KAAI,CAACuJ,EAAKa,IACvBxN,cAAA,MAAAF,SACKgM,EAAa1I,KAAKwJ,GACf5M,cAAA,MAAAF,SACKkM,EACGhM,cAAA,SACIQ,KAAK,OACLqG,MAAO8F,EAAIC,GACX9F,SAAWhB,GACP6F,GAAoB8B,IAChB,MAAMC,EAAU,IAAID,GAEpB,OADAC,EAAQF,GAAUZ,GAAU9G,EAAEhB,OAAO+B,MAC9B6G,CAAO,IAGtB3N,UAAU,iBAGd4M,EAAIC,IAfHA,MAFRY,UAyBrB5N,eAAA,OAAKG,UAAU,sCAAqCD,SAAA,CAChDE,cAAA,UAAQD,UAAU,kBAAkBY,QAzM5CwB,UAChB,IACI,MAAM6D,QAAiByB,MAAM,8CAA+C,CACxEC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChBC,cAAe,UAAUvI,aAAaC,QAAQ,YAElDuI,KAAMxF,KAAKyF,UAAU,CAAEsF,SAAU9B,EAAcpC,QAASwC,MAG5D,IAAK1F,EAAS+B,GAAI,CACd,MAAMC,QAAkBhC,EAASiC,OACjC,MAAM,IAAIC,MAAMF,EAAUrB,SAAW,0BACzC,CAEA,MAAMpD,QAAayC,EAASiC,OAC5BwD,EAAelI,EAAK2F,SAAW,IAC/ByC,EAAmBpI,EAAK2F,SAAW,IACnC+C,GAAc,EAClB,CAAE,MAAO9D,GACLX,EAASW,aAAeD,MAAQC,EAAIxB,QAAU,gCAClD,GAmLiF7G,SAAC,iBAG1DE,cAAA,UAAQD,UAAU,kBAAkBY,QAlL3CgN,KACjB,GAAI/B,EAAYxD,OAAS,EAAG,CACxB,MAAMwF,EAAWhC,EAAYA,EAAYxD,OAAS,GAClDuD,EAAmBiC,GACnB/B,EAAeD,EAAYiC,MAAM,GAAI,GACzC,MACIrG,EAAS,oBACb,EA2KkF1H,SAAC,yBAMnEE,cAAA,KAAAF,SAAG,+CAIb,I,MCxSCgO,MApBOA,IAElB9N,cAAC+N,IAAM,CAAAjO,SACLE,cAAA,OAAKD,UAAU,MAAKD,SAClBF,eAACoO,IAAM,CAAAlO,SAAA,CACLE,cAACiO,IAAK,CAACC,KAAK,IAAIC,QAASnO,cAAC+B,EAAQ,MAClC/B,cAACiO,IAAK,CAACC,KAAK,wBAAwBC,QAASnO,cAACgC,EAAsB,MACpEhC,cAACiO,IAAK,CAACC,KAAK,uBAAuBC,QAASnO,cAACiD,EAAqB,MAClEjD,cAACiO,IAAK,CAACC,KAAK,+BAA+BC,QAASnO,cAAC6E,EAA6B,MAClF7E,cAACiO,IAAK,CAACC,KAAK,iBAAiBC,QAASnO,cAACgF,EAAgB,MACvDhF,cAACiO,IAAK,CAACC,KAAK,wBAAwBC,QAASnO,cAACqH,EAAsB,MACpErH,cAACiO,IAAK,CAACC,KAAK,+BAA+BC,QAASnO,cAACsI,EAA6B,MAClFtI,cAACiO,IAAK,CAACC,KAAK,4BAA4BC,QAASnO,cAACqK,EAA0B,MAC5ErK,cAACiO,IAAK,CAACC,KAAK,cAAcC,QAASnO,cAACmL,EAAc,aCpB5DiD,IAASC,OACPrO,cAACsO,IAAMC,WAAU,CAAAzO,SACfE,cAAC8N,EAAG,MAEN9J,SAASwK,eAAe,Q","file":"static/js/main.8b125cb1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/account.724b79cd.png\";","export default __webpack_public_path__ + \"static/media/accountgreen.ea981c29.png\";","export default __webpack_public_path__ + \"static/media/home.75dfb601.png\";","export default __webpack_public_path__ + \"static/media/generate.bd105766.png\";","export default __webpack_public_path__ + \"static/media/template.5cf9cee6.png\";","export default __webpack_public_path__ + \"static/media/knowledge.178c5587.png\";","export default __webpack_public_path__ + \"static/media/management.5f669e14.png\";","import React, { useEffect, useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../styles/navbar.css';\r\nimport '../styles/fonts.css'; // Import the fonts.css file\r\nimport { useLocation, Link, useNavigate } from 'react-router-dom';\r\nimport accountIcon from '../assets/images/account.png'; // Default account icon\r\nimport accountGreenIcon from '../assets/images/accountgreen.png'; // Green account icon for logged-in users\r\nimport homeIcon from '../assets/images/home.png'; // Import the home icon\r\nimport generateIcon from '../assets/images/generate.png'; // Import the generate icon\r\nimport templateIcon from '../assets/images/template.png'; // Import the template icon\r\nimport knowledgeIcon from '../assets/images/knowledge.png'; // Import the knowledge icon\r\nimport managementIcon from '../assets/images/management.png'; // Import the management icon\r\n\r\nconst Navbar: React.FC = () => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate(); // React Router's navigation hook\r\n    const [isScrolled, setIsScrolled] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false); // State to track login status\r\n\r\n    useEffect(() => {\r\n        // Check if the user is logged in by verifying the presence of a token\r\n        const token = localStorage.getItem('token');\r\n        setIsLoggedIn(!!token); // Set to true if token exists, false otherwise\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (window.scrollY > 50) {\r\n                setIsScrolled(true);\r\n            } else {\r\n                setIsScrolled(false);\r\n            }\r\n        };\r\n\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    // Handle Logout\r\n    const handleLogout = () => {\r\n        localStorage.removeItem('token'); // Clear the JWT token from localStorage\r\n        setIsLoggedIn(false); // Update login status\r\n        navigate('/signin-signup'); // Redirect to the SignInSignUpPage\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-dark custom-navbar ${isScrolled ? 'hidden' : ''}`}>\r\n                <Link className=\"navbar-brand\" to=\"/\" style={{ fontFamily: 'ShackleItalic', fontSize: '36px', marginRight: '10px', marginLeft: '10px' }}>\r\n                    iTEL\r\n                </Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul className=\"navbar-nav mx-auto\">\r\n                        <li className={`nav-item ${location.pathname === '/' ? 'active' : ''}`}>\r\n                            <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className={`nav-item ${location.pathname === '/test-case-generation' ? 'active' : ''}`}>\r\n                            <Link className=\"nav-link\" to=\"/test-case-generation\">Test Case Generation</Link>\r\n                        </li>\r\n                        <li className={`nav-item ${location.pathname === '/test-case-templates' ? 'active' : ''}`}>\r\n                            <Link className=\"nav-link\" to=\"/test-case-templates\">Test Case Templates</Link>\r\n                        </li>\r\n                        <li className={`nav-item ${location.pathname === '/quality-assurance-knowledge' ? 'active' : ''}`}>\r\n                            <Link className=\"nav-link\" to=\"/quality-assurance-knowledge\">Quality Assurance Knowledge</Link>\r\n                        </li>\r\n                        {/* Management option visible to all users */}\r\n                        <li className={`nav-item ${location.pathname === '/management' ? 'active' : ''}`}>\r\n                            <Link className=\"nav-link\" to=\"/management\">Management</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        {isLoggedIn ? (\r\n                            <>\r\n                                <li className=\"nav-item\">\r\n                                    <button onClick={handleLogout} className=\"btn btn-danger navbar-logout-button\">\r\n                                        Logout\r\n                                    </button>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <Link className=\"nav-link\" to=\"/signin-signup\">\r\n                                        <img\r\n                                            src={accountGreenIcon} // Use green icon if logged in\r\n                                            alt=\"Account\"\r\n                                            style={{ height: '36px', width: '36px' }}\r\n                                        />\r\n                                    </Link>\r\n                                </li>\r\n                            </>\r\n                        ) : (\r\n                            <li className=\"nav-item\">\r\n                                <button\r\n                                    onClick={() => navigate('/signin-signup')} // Redirect to SignInSignUpPage\r\n                                    className=\"btn btn-primary navbar-login-button\"\r\n                                >\r\n                                    Login/Signup\r\n                                </button>\r\n                            </li>\r\n                        )}\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n            <div className={`side-panel ${isScrolled ? 'visible' : ''}`}>\r\n                <Link className=\"navbar-brand\" to=\"/\" style={{ fontFamily: 'ShackleItalic', fontSize: '36px', marginBottom: '20px' }}>\r\n                    iTEL\r\n                </Link>\r\n                <ul className=\"side-nav\">\r\n                    <li className={`side-nav-item ${location.pathname === '/' ? 'active' : ''}`}>\r\n                        <Link className=\"side-nav-link\" to=\"/\">\r\n                            <img src={homeIcon} alt=\"Home\" />\r\n                        </Link>\r\n                    </li>\r\n                    <li className={`side-nav-item ${location.pathname === '/test-case-generation' ? 'active' : ''}`}>\r\n                        <Link className=\"side-nav-link\" to=\"/test-case-generation\">\r\n                            <img src={generateIcon} alt=\"Test Case Generation\" />\r\n                        </Link>\r\n                    </li>\r\n                    <li className={`side-nav-item ${location.pathname === '/test-case-templates' ? 'active' : ''}`}>\r\n                        <Link className=\"side-nav-link\" to=\"/test-case-templates\">\r\n                            <img src={templateIcon} alt=\"Test Case Templates\" />\r\n                        </Link>\r\n                    </li>\r\n                    <li className={`side-nav-item ${location.pathname === '/quality-assurance-knowledge' ? 'active' : ''}`}>\r\n                        <Link className=\"side-nav-link\" to=\"/quality-assurance-knowledge\">\r\n                            <img src={knowledgeIcon} alt=\"Quality Assurance Knowledge\" />\r\n                        </Link>\r\n                    </li>\r\n                    {/* Management option visible to all users */}\r\n                    <li className={`side-nav-item ${location.pathname === '/management' ? 'active' : ''}`}>\r\n                        <Link className=\"side-nav-link\" to=\"/management\">\r\n                            <img src={managementIcon} alt=\"Management\" />\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"side-nav-account\">\r\n                    <Link className=\"side-nav-link\" to=\"/signin-signup\">\r\n                        <img\r\n                            src={isLoggedIn ? accountGreenIcon : accountIcon} // Use green icon if logged in\r\n                            alt=\"Account\"\r\n                            style={{ height: '36px', width: '36px' }}\r\n                        />\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navbar;","export default __webpack_public_path__ + \"static/media/MD.72e4ced7.png\";","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../styles/footer.css'; // Import the CSS file for custom styles\r\nimport logo from '../assets/images/MD.png'; // Import the image\r\n\r\nconst Footer: React.FC = () => {\r\n    return (\r\n        <footer className=\"footer mt-auto py-3 bg-dark text-white\">\r\n            <div className=\"container text-center\">\r\n                <img src={logo} alt=\"Logo\" className=\"footer-logo mb-3\" />\r\n                <ul className=\"list-inline mb-0\">\r\n                    <li className=\"list-inline-item\">\r\n                        <a href=\"/about-us\" className=\"text-white\">About Us</a>\r\n                    </li>\r\n                    <li className=\"list-inline-item\">\r\n                        <a href=\"/privacy-policy\" className=\"text-white\">Privacy Policy</a>\r\n                    </li>\r\n                    <li className=\"list-inline-item\">\r\n                        <a href=\"/faq\" className=\"text-white\">FAQ</a>\r\n                    </li>\r\n                    <li className=\"list-inline-item\">\r\n                        <a href=\"/terms-and-conditions\" className=\"text-white\">Terms and Conditions</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"container text-center\">\r\n                <p className=\"mt-3 mb-0\">&copy; 2025 iTEL. All rights reserved.</p>\r\n            </div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\nimport '../styles/global.css'; // Import the global CSS file\r\n\r\nconst withFooter = (WrappedComponent: React.FC) => {\r\n    return () => (\r\n        <div className=\"page-container\">\r\n            <Navbar />\r\n            <div className=\"content-wrap\">\r\n                <WrappedComponent />\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withFooter;","import React from 'react';\nimport withFooter from '../components/withFooter';\nimport '../styles/global.css'; // Import the global CSS file\nimport '../styles/HomePage.css'; // Import the homepage CSS file\n\nconst HomePage: React.FC = () => {\n    return (\n        <div className=\"home-page\">\n            <header className=\"text-center my-4 header-container\">\n                <h1 className=\"animated-title\">Welcome to ITEL</h1>\n                <p className=\"animated-description\">\n                    Intelligent Test Engineering & Learning – your ultimate solution for efficient test case generation, validation, and management.<br />\n                    ITEL revolutionizes the testing process by combining a systematic, rule-based methodology with smart automation and user-driven inputs.<br />\n                    Say goodbye to cumbersome test case creation and welcome a streamlined approach that enhances quality assurance across your projects.\n                </p>\n            </header>\n            <main className=\"container\">\n                <section className=\"my-4 animated-section\">\n                    <h2>Effortless Test Case Generation</h2>\n                    <ul>\n                        <li><strong>URL-Based Generation:</strong> ITEL analyzes your web application's structure to identify key UI elements and automatically creates comprehensive test scenarios.</li>\n                        <li><strong>Screenshot-Based Generation:</strong> Leveraging OCR technology, ITEL converts screenshots into actionable test cases by mapping visual UI elements accurately.</li>\n                        <li><strong>Test Case Classification:</strong> Using predefined models to validate and classify the test cases.</li>\n                    </ul>\n                </section>\n                <section className=\"my-4 animated-section\">\n                    <h2>Robust Test Case Management</h2>\n                    <p>Organize your testing workflow with our intuitive management system. Easily classify, store, and modify test cases by functionality and priority using advanced filtering and search capabilities, ensuring you always have the right test case at your fingertips.</p>\n                </section>\n                <section className=\"my-4 animated-section\">\n                    <h2>Empower Your Team with Knowledge</h2>\n                    <p>The integrated Information Panel serves as a learning hub, offering:</p>\n                    <ul>\n                        <li>Step-by-step tutorials</li>\n                        <li>Industry-standard test templates</li>\n                        <li>In-depth explanations of key testing concepts such as functional, regression, and performance testing</li>\n                    </ul>\n                    <p>Enhance your team's expertise and elevate your software quality assurance practices.</p>\n                </section>\n                <section className=\"my-4 animated-section\">\n                    <h2>Security and Scalability at Its Core</h2>\n                    <p>With robust user authentication, role-based access control, and advanced encryption algorithms, ITEL safeguards your test cases from unauthorized modifications. Designed to scale effortlessly, our platform supports teams of every size – from small testing groups to large enterprise organizations.</p>\n                </section>\n                <section className=\"my-4 animated-section\">\n                    <h2>Discover a Smarter, More Efficient Way to Manage Your Testing Process with ITEL</h2>\n                    <p>Experience the future of test engineering and learning today!</p>\n                </section>\n            </main>\n        </div>\n    );\n};\n\nexport default withFooter(HomePage);","import React, { useEffect, useState } from 'react';\r\nimport withFooter from '../components/withFooter';\r\nimport '../styles/global.css'; // Import the global CSS file\r\nimport '../styles/testCaseGenerationPage.css'; // Import the specific CSS file for this page\r\n\r\nconst TestCaseGenerationPage: React.FC = () => {\r\n    const [role, setRole] = useState<string | null>(null);\r\n\r\n   \r\n    useEffect(() => {\r\n        const fetchUserRole = async () => {\r\n            const token = localStorage.getItem('token');\r\n            if (token) {\r\n                try {\r\n                    const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\r\n                    setRole(decodedToken.role);\r\n                } catch (error) {\r\n                    console.error('Error decoding token:', error);\r\n                    setRole(null);\r\n                }\r\n            } else {\r\n                setRole(null);\r\n            }\r\n        };\r\n\r\n        fetchUserRole();\r\n    }, []);\r\n\r\n    // Handle restricted access\r\n    const handleRestrictedAccess = () => {\r\n        alert('Access denied. You must be an Engineer or Administrator to access this tool.');\r\n    };\r\n\r\n    return (\r\n        <div className=\"test-case-generation-page\">\r\n            {/* Floating Role Badge below the navbar */}\r\n            {role && (\r\n                <div className=\"floating-role-badge\" title={`You are logged in as ${role}`}>\r\n                    Logged in as: <strong>{role}</strong>\r\n                </div>\r\n            )}\r\n\r\n            <header className=\"text-center my-4\">\r\n                <h1>Test Case Generation</h1>\r\n                <p>Generate test cases efficiently using our tool.</p>\r\n            </header>\r\n            <main className=\"container\">\r\n                <section className=\"my-4\">\r\n                    <h2>Choose a Generation Method</h2>\r\n                    <div className=\"generation-options\">\r\n                        {/* Option 1: URL-Based Generation (Accessible to all users) */}\r\n                        <div className=\"option\">\r\n                            <div className=\"option-content\">\r\n                                <h3>URL-Based Generation</h3>\r\n                                <p>Analyze your web application's structure to identify key UI elements and automatically create comprehensive test scenarios.</p>\r\n                            </div>\r\n                            <a href=\"/url-based-generation\" className=\"go-button\">\r\n                                Go →\r\n                            </a>\r\n                        </div>\r\n\r\n                        {/* Option 2: Screenshot-Based Generation (Accessible to all users) */}\r\n                        <div className=\"option\">\r\n                            <div className=\"option-content\">\r\n                                <h3>Screenshot-Based Generation</h3>\r\n                                <p>Leverage OCR technology to convert screenshots into actionable test cases by mapping visual UI elements accurately.</p>\r\n                            </div>\r\n                            <a href=\"/screenshot-based-generation\" className=\"go-button\">\r\n                                Go →\r\n                            </a>\r\n                        </div>\r\n\r\n                        {/* Option 3: Test Case Classification (Restricted to Engineer and Administrator roles) */}\r\n                        <div className=\"option\">\r\n                            <div className=\"option-content\">\r\n                                <h3>Test Case Classification</h3>\r\n                                <p>Use predefined models to validate and classify test cases efficiently.</p>\r\n                            </div>\r\n                            {role === 'Engineer' || role === 'Administrator' ? (\r\n                                <a href=\"/test-case-classification\" className=\"go-button\">\r\n                                    Go →\r\n                                </a>\r\n                            ) : (\r\n                                <button\r\n                                    className=\"go-button disabled\"\r\n                                    onClick={handleRestrictedAccess}\r\n                                >\r\n                                    Restricted\r\n                                </button>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withFooter(TestCaseGenerationPage);","import React from 'react';\r\nimport withFooter from '../components/withFooter';\r\n\r\nimport '../styles/global.css'; // Import the global CSS file\r\n\r\nconst testCases: Record<number, string[]> = {\r\n    1: [\"TC001\", \"Login with Valid Credentials\", \"Verify user can log in with valid username and password.\", \"1. Open login page\\n2. Enter valid username\\n3. Enter valid password\\n4. Click Login\", \"User is redirected to dashboard with welcome message and user-specific data.\"],\r\n    2: [\"TC002\", \"Login with Invalid Credentials\", \"Ensure the system rejects invalid credentials.\", \"1. Open login page\\n2. Enter incorrect username/password\\n3. Click Login\", \"Error message 'Invalid username or password' appears, login fails.\"],\r\n    3: [\"TC003\", \"Password Complexity Rules\", \"Validate password field requires uppercase, lowercase, special character, and minimum 8 characters.\", \"1. Go to signup page\\n2. Enter simple password (e.g., 'test')\\n3. Try to submit\", \"Error message 'Password must meet complexity rules' is shown.\"],\r\n    4: [\"TC004\", \"Forgot Password Functionality\", \"Verify email reset link is sent upon request.\", \"1. Click 'Forgot Password' on login page\\n2. Enter registered email\\n3. Click Submit\", \"Message 'Password reset link sent to your email' appears.\"],\r\n    5: [\"TC005\", \"Session Timeout\", \"Ensure system logs out user after inactivity.\", \"1. Login and remain idle for 30+ mins\\n2. Try to navigate or click after timeout\", \"Redirected to login page with message 'Session expired'.\"],\r\n    6: [\"TC006\", \"Signup with Existing Username\", \"System should reject duplicate usernames during signup.\", \"1. Go to signup page\\n2. Enter existing username\\n3. Fill other details\\n4. Submit\", \"Error 'Username already exists' shown, signup blocked.\"],\r\n    7: [\"TC007\", \"Email Format Validation\", \"Ensure system validates correct email structure.\", \"1. Go to signup page\\n2. Enter 'user@domain' or 'user@'\\n3. Submit\", \"Error 'Invalid email format' shown.\"],\r\n    8: [\"TC008\", \"Logout Functionality\", \"Check if logout correctly redirects and ends session.\", \"1. Login\\n2. Click logout icon or button\", \"User is redirected to login page, session terminated.\"],\r\n    9: [\"TC009\", \"Empty Form Submission\", \"System should not allow empty fields on login.\", \"1. Leave username and password blank\\n2. Click Login\", \"Error messages shown for both fields: 'Username is required' and 'Password is required'.\"],\r\n    10: [\"TC010\", \"Password Mismatch on Signup\", \"Ensure both password fields must match.\", \"1. Enter different passwords in 'Password' and 'Confirm Password'\\n2. Submit form\", \"Error message 'Passwords do not match' appears, form not submitted.\"]\r\n};\r\n\r\nconst seleniumTemplates: string[] = [\r\n    `@SmokeTest\r\nFeature: Login\r\n  Scenario: Login with valid credentials\r\n    Given User opens the browser\r\n    And navigates to the login page\r\n    When User enters valid credentials\r\n    And clicks login\r\n    Then User is redirected to the dashboard`,\r\n\r\n    `@SanityTest\r\nFeature: Logout\r\n  Scenario: User logs out successfully\r\n    Given User is logged in\r\n    When User clicks the logout button\r\n    Then User is redirected to the login screen\r\n    And session is terminated`,\r\n\r\n    `@RegressionTest\r\nFeature: Delete Entry\r\n  Scenario: User deletes an entry\r\n    Given User is on the entries page\r\n    When User selects an entry and clicks delete\r\n    And confirms the deletion\r\n    Then Entry should no longer appear in the list`,\r\n\r\n    `@SmokeTest\r\nFeature: File Upload\r\n  Scenario: Upload a file\r\n    Given User is on the upload form\r\n    When User selects a valid file\r\n    And clicks submit\r\n    Then Success message is shown\r\n    And file appears in the list`,\r\n\r\n    `@SanityTest\r\nFeature: Search\r\n  Scenario: Perform keyword search\r\n    Given User is on the search page\r\n    When User enters a search term\r\n    And clicks search\r\n    Then Relevant results are displayed`,\r\n\r\n    `@RegressionTest\r\nFeature: Add to Cart\r\n  Scenario: Add product to cart\r\n    Given User views a product\r\n    When User clicks 'Add to Cart'\r\n    Then Product appears in cart with correct details`,\r\n\r\n    `@RegressionTest\r\nFeature: Pagination\r\n  Scenario: Navigate between pages\r\n    Given User is on paginated results\r\n    When User clicks next\r\n    Then Next set of results is shown`,\r\n\r\n    `@SanityTest\r\nFeature: Form Submission\r\n  Scenario: Submit filled form\r\n    Given User fills all required fields\r\n    When User submits the form\r\n    Then Confirmation appears and data is saved`,\r\n\r\n    `@SmokeTest\r\nFeature: Profile Update\r\n  Scenario: Edit profile successfully\r\n    Given User is on profile page\r\n    When User updates details and saves\r\n    Then Updated info is reflected immediately`,\r\n\r\n    `@RegressionTest\r\nFeature: Password Reset\r\n  Scenario: Reset password via email\r\n    Given User is on forgot password page\r\n    When User submits a registered email\r\n    Then Reset link is sent\r\n    And User can log in with new password`\r\n];\r\n\r\nconst TestCaseTemplatesPage: React.FC = () => {\r\n    const downloadTC = (id: number) => {\r\n        const data = testCases[id];\r\n        const csv = [\"Test Case ID,Title,Description,Steps,Expected Result\", data.join(',')].join('\\n');\r\n        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n        const url = URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.setAttribute('href', url);\r\n        link.setAttribute('download', `${data[0]}_Test_Case.csv`);\r\n        link.click();\r\n    };\r\n\r\n    return (\r\n        <div className=\"test-case-templates-page\">\r\n            <header className=\"text-center my-4\">\r\n                <h1>Test Case Templates</h1>\r\n                <p>Manage and use test case templates for both manual and automated (Selenium-based) testing.</p>\r\n            </header>\r\n            <main className=\"container\">\r\n                <section className=\"mb-5\">\r\n  <h2 className=\"mb-4\">📘 What You'll Find Here</h2>\r\n  <p className=\"mb-4\">\r\n    This page offers ready-to-use test case templates to help QA testers — especially beginners — get started with writing clear,\r\n    effective manual and automation test cases.\r\n  </p>\r\n  <ul className=\"mb-4\">\r\n    <li className=\"mb-3\">\r\n      🗂️ <strong>Manual Test Case Downloads:</strong> 10 beginner-friendly test cases in CSV format\r\n    </li>\r\n    <li className=\"mb-3\">\r\n      🧪 <strong>Selenium Scenarios:</strong> Ready-to-copy Gherkin-style scenarios for login, logout, and more\r\n    </li>\r\n    <li className=\"mb-3\">\r\n      📋 <strong>Realistic Examples:</strong> Scenarios include login, form submission, pagination, and uploads\r\n      <ul className=\"mt-2 ms-3\">\r\n        <li className=\"mb-1\"><strong>Login:</strong> Automate end-to-end login with valid and invalid credentials, including validations and redirects.</li>\r\n        <li className=\"mb-1\"><strong>Form Submission:</strong> Test mandatory field checks, data validation, and confirmation messages.</li>\r\n        <li className=\"mb-1\"><strong>Pagination:</strong> Verify navigation across multiple pages with accurate data rendering.</li>\r\n        <li className=\"mb-1\"><strong>File Upload:</strong> Validate file formats, upload size, and proper file listing after submission.</li>\r\n      </ul>\r\n    </li>\r\n    <li className=\"mb-3\">\r\n      🔁 <strong>Reusable Snippets:</strong> Use directly in frameworks like Cucumber, JUnit, or PyTest\r\n      <p className=\"mt-2 mb-2\">\r\n        Each test scenario is written with generic Given/When/Then steps or step-driven actions, making them easy to port into:\r\n      </p>\r\n      <ul className=\"ms-3\">\r\n        <li><strong>Cucumber:</strong> Use the Gherkin format directly in your .feature files.</li>\r\n        <li><strong>JUnit:</strong> Adapt scenarios into Java methods annotated with @Test and assertions.</li>\r\n        <li><strong>PyTest:</strong> Convert step logic into test functions using Python with assertions.</li>\r\n      </ul>\r\n    </li>\r\n  </ul>\r\n</section>\r\n                <section className=\"mb-5\">\r\n                    <h2>🧪 Beginner-Friendly Manual Test Case Downloads</h2>\r\n                    <p>Click a button below to download a test case in CSV format with detailed steps and expected results.</p>\r\n                    <div className=\"row\">\r\n                        {Object.entries(testCases).map(([id, tc]) => (\r\n                            <div className=\"col-md-6 mb-2\" key={id}>\r\n                                <button className=\"btn btn-outline-primary w-100\" onClick={() => downloadTC(Number(id))}>\r\n                                    {tc[1]}\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </section>\r\n\r\n                <section className=\"mb-5\">\r\n                    <h2>🧰 Selenium Feature Template Scenarios</h2>\r\n                    <p>Use these as a guide to implement Selenium automation scripts for common web application flows.</p>\r\n                    <div>\r\n                    {seleniumTemplates.map((item, index) => (\r\n                        <div className=\"position-relative mb-3\">\r\n  <pre className=\"bg-light p-3 rounded border\">\r\n    <code>{item}</code>\r\n  </pre>\r\n  <button\r\n    onClick={() => navigator.clipboard.writeText(item)}\r\n    className=\"btn btn-sm btn-outline-secondary position-absolute\"\r\n    style={{ top: '10px', right: '10px' }}\r\n  >\r\n    Copy\r\n  </button>\r\n</div>\r\n                    ))}\r\n                </div>\r\n                </section>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withFooter(TestCaseTemplatesPage);\r\n","import React from 'react';\r\nimport withFooter from '../components/withFooter';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst QualityAssuranceKnowledgePage: React.FC = () => {\r\n    // const testCases: Record<number, string[]> = {\r\n    //     1: [\"TC001\", \"Login with Valid Credentials\", \"Verify user can log in with valid username and password.\", \"1. Open login page\\n2. Enter valid username\\n3. Enter valid password\\n4. Click Login\", \"User is redirected to dashboard with welcome message and user-specific data.\"],\r\n    //     2: [\"TC002\", \"Login with Invalid Credentials\", \"Ensure the system rejects invalid credentials.\", \"1. Open login page\\n2. Enter incorrect username/password\\n3. Click Login\", \"Error message 'Invalid username or password' appears, login fails.\"],\r\n    //     3: [\"TC003\", \"Password Complexity Rules\", \"Validate password field requires uppercase, lowercase, special character, and minimum 8 characters.\", \"1. Go to signup page\\n2. Enter simple password (e.g., 'test')\\n3. Try to submit\", \"Error message 'Password must meet complexity rules' is shown.\"],\r\n    //     4: [\"TC004\", \"Forgot Password Functionality\", \"Verify email reset link is sent upon request.\", \"1. Click 'Forgot Password' on login page\\n2. Enter registered email\\n3. Click Submit\", \"Message 'Password reset link sent to your email' appears.\"],\r\n    //     5: [\"TC005\", \"Session Timeout\", \"Ensure system logs out user after inactivity.\", \"1. Login and remain idle for 30+ mins\\n2. Try to navigate or click after timeout\", \"Redirected to login page with message 'Session expired'.\"],\r\n    //     6: [\"TC006\", \"Signup with Existing Username\", \"System should reject duplicate usernames during signup.\", \"1. Go to signup page\\n2. Enter existing username\\n3. Fill other details\\n4. Submit\", \"Error 'Username already exists' shown, signup blocked.\"],\r\n    //     7: [\"TC007\", \"Email Format Validation\", \"Ensure system validates correct email structure.\", \"1. Go to signup page\\n2. Enter 'user@domain' or 'user@'\\n3. Submit\", \"Error 'Invalid email format' shown.\"],\r\n    //     8: [\"TC008\", \"Logout Functionality\", \"Check if logout correctly redirects and ends session.\", \"1. Login\\n2. Click logout icon or button\", \"User is redirected to login page, session terminated.\"],\r\n    //     9: [\"TC009\", \"Empty Form Submission\", \"System should not allow empty fields on login.\", \"1. Leave username and password blank\\n2. Click Login\", \"Error messages shown for both fields: 'Username is required' and 'Password is required'.\"],\r\n    //     10: [\"TC010\", \"Password Mismatch on Signup\", \"Ensure both password fields must match.\", \"1. Enter different passwords in 'Password' and 'Confirm Password'\\n2. Submit form\", \"Error message 'Passwords do not match' appears, form not submitted.\"]\r\n    // };\r\n    // const downloadTC = (id: number) => {\r\n       \r\n    //     const data = testCases[id];\r\n    //     const csv = [\"Test Case ID,Title,Description,Steps,Expected Result\", data.join(',')].join('\\n');\r\n    //     const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r\n    //     const url = URL.createObjectURL(blob);\r\n    //     const link = document.createElement('a');\r\n    //     link.setAttribute('href', url);\r\n    //     link.setAttribute('download', `${data[0]}_Test_Case.csv`);\r\n    //     link.click();\r\n    // };\r\n\r\n    return (\r\n        <div className=\"quality-assurance-knowledge-page\">\r\n            <header className=\"text-center my-5\">\r\n                <h1>Quality Assurance Knowledge Hub</h1>\r\n                <p className=\"lead\">Explore comprehensive QA concepts, methodologies, tools, and downloadable beginner-friendly test cases.</p>\r\n            </header>\r\n            <main className=\"container\">\r\n                <nav className=\"mb-5\">\r\n                    <h4>📌 Page Overview</h4>\r\n                    <ul>\r\n                        <li><a href=\"#manual-testing\">🔍 Manual Testing</a></li>\r\n                        <li><a href=\"#automation-testing\">🤖 Automation Testing</a></li>\r\n                        <li><a href=\"#performance-testing\">🚀 Performance Testing</a></li>\r\n                        <li><a href=\"#resources\">📚 Helpful Resources</a></li>\r\n                    </ul>\r\n                </nav>\r\n                <section className=\"mb-5\">\r\n                    <h2 id=\"manual-testing\" className=\"mt-5\">🔍 Manual Testing</h2>\r\n<p><strong>✅ What is Manual Testing?</strong> Manual testing is the process of manually executing test cases—without the use of automation tools—to identify bugs or issues in a software application. Testers act as end-users and verify that all features work as expected.</p>\r\n\r\n<p><strong>🔍 Purpose of Manual Testing</strong></p>\r\n<ul>\r\n  <li>Ensure the application behaves correctly</li>\r\n  <li>Validate business logic and user experience</li>\r\n  <li>Catch bugs before the product reaches users</li>\r\n  <li>Verify that fixes or updates don’t break other parts (regression testing)</li>\r\n</ul>\r\n\r\n<p><strong>🧪 Key Activities in Manual Testing</strong></p>\r\n<ul>\r\n  <li><strong>Understand Requirements:</strong> Read functional and business requirements; clarify doubts with stakeholders or developers.</li>\r\n  <li><strong>Create Test Cases:</strong> Write step-by-step instructions for what to test and include expected results for each step.</li>\r\n  <li><strong>Prepare Test Data:</strong> Set up sample user accounts, inputs, or files needed for testing.</li>\r\n  <li><strong>Execute Tests:</strong> Manually follow test steps and document the results.</li>\r\n  <li><strong>Report Bugs:</strong> Log defects with clear steps, screenshots, or logs.</li>\r\n  <li><strong>Re-test & Regression Test:</strong> Re-test fixed issues and ensure no new bugs were introduced.</li>\r\n</ul>\r\n\r\n<p><strong>🧰 Types of Manual Testing</strong></p>\r\n<table className=\"table table-bordered\">\r\n  <thead>\r\n    <tr>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td>Smoke Testing</td><td>Basic check to ensure the app launches or runs basic functions</td></tr>\r\n    <tr><td>Sanity Testing</td><td>Quick check after minor changes to verify specific functionality</td></tr>\r\n    <tr><td>Functional Testing</td><td>Validates each function of the app as per the requirement</td></tr>\r\n    <tr><td>Regression Testing</td><td>Ensures old features work after updates/fixes</td></tr>\r\n    <tr><td>Exploratory Testing</td><td>Testing without scripts to discover unexpected issues</td></tr>\r\n    <tr><td>Usability Testing</td><td>Evaluates the user interface and experience</td></tr>\r\n    <tr><td>Compatibility Testing</td><td>Tests how the app works across devices, OS, and browsers</td></tr>\r\n    <tr><td>Acceptance Testing</td><td>Confirms whether the app meets user needs and is ready for release</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<p><strong>📘 Advantages of Manual Testing</strong></p>\r\n<ul>\r\n  <li>Best suited for exploratory, usability, and ad hoc testing</li>\r\n  <li>Detects real user issues</li>\r\n  <li>Doesn’t require scripting or tools knowledge</li>\r\n  <li>Lower upfront cost</li>\r\n</ul>\r\n\r\n<p><strong>⚠️ Disadvantages of Manual Testing</strong></p>\r\n<ul>\r\n  <li>Time-consuming and repetitive</li>\r\n  <li>Not ideal for large-scale or repeated test cases</li>\r\n  <li>Human error is possible</li>\r\n  <li>Hard to scale for frequent releases</li>\r\n</ul>\r\n\r\n<p><strong>📝 Best Practices in Manual Testing</strong></p>\r\n<ul>\r\n  <li>Write clear and concise test cases</li>\r\n  <li>Always refer to the latest requirements</li>\r\n  <li>Use version control for test documentation</li>\r\n  <li>Prioritise test cases based on risk</li>\r\n  <li>Keep bug reports detailed and objective</li>\r\n  <li>Communicate frequently with developers and stakeholders</li>\r\n</ul>\r\n\r\n<p><strong>📄 Manual Testing Lifecycle (STLC)</strong></p>\r\n<ul>\r\n  <li>Requirement Analysis</li>\r\n  <li>Test Planning</li>\r\n  <li>Test Case Design</li>\r\n  <li>Environment Setup</li>\r\n  <li>Test Execution</li>\r\n  <li>Defect Reporting</li>\r\n  <li>Test Closure</li>\r\n</ul>\r\n</section>\r\n\r\n                <section className=\"mb-5\">\r\n                    <h2 id=\"automation-testing\" className=\"mt-5\">🤖 Automation Testing</h2>\r\n<p><strong>What is Automation Testing?</strong> Automation testing is the process of using software tools and scripts to run tests automatically. Unlike manual testing, it doesn't require human intervention once the tests are written and configured. It’s ideal for repetitive, time-consuming, or regression tests—and critical for agile or CI/CD environments.</p>\r\n\r\n<p><strong>🎯 Purpose of Automation Testing</strong></p>\r\n<ul>\r\n  <li>Increase test efficiency and speed</li>\r\n  <li>Minimise human error</li>\r\n  <li>Enable frequent testing (e.g., during every build)</li>\r\n  <li>Improve test coverage</li>\r\n  <li>Reduce cost over time</li>\r\n</ul>\r\n\r\n<p><strong>⚙️ How Automation Testing Works</strong></p>\r\n<ul>\r\n  <li><strong>Select the Right Test Cases:</strong> Choose test cases that are stable, repetitive, and time-intensive to automate.</li>\r\n  <li><strong>Choose an Automation Tool:</strong> Examples include Selenium, Cypress, Playwright, Appium, JUnit, TestNG, etc.</li>\r\n  <li><strong>Write Test Scripts:</strong> Scripts are written using programming languages (e.g., Java, JavaScript, Python).</li>\r\n  <li><strong>Execute Tests:</strong> Tests run automatically on demand or on schedule.</li>\r\n  <li><strong>Review Reports:</strong> Logs and test results help you identify bugs quickly.</li>\r\n</ul>\r\n\r\n<p><strong>🧪 Types of Automation Testing</strong></p>\r\n<table className=\"table table-bordered\">\r\n  <thead>\r\n    <tr>\r\n      <th>Type</th>\r\n      <th>Purpose</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td>Unit Testing</td><td>Tests individual units of code (methods/functions)</td></tr>\r\n    <tr><td>Integration Testing</td><td>Tests interaction between modules/components</td></tr>\r\n    <tr><td>Functional Testing</td><td>Verifies each feature functions according to requirements</td></tr>\r\n    <tr><td>Regression Testing</td><td>Ensures new code hasn’t broken existing features</td></tr>\r\n    <tr><td>Smoke Testing</td><td>Basic tests to ensure the system is stable enough for deeper testing</td></tr>\r\n    <tr><td>UI Testing</td><td>Validates user interface behavior</td></tr>\r\n    <tr><td>API Testing</td><td>Tests backend APIs directly using tools like Postman or REST Assured</td></tr>\r\n    <tr><td>Performance Testing</td><td>Checks how the system performs under load (can be semi-automated)</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<p><strong>🧰 Popular Automation Testing Tools</strong></p>\r\n<table className=\"table table-bordered\">\r\n  <thead>\r\n    <tr>\r\n      <th>Tool</th>\r\n      <th>Used For</th>\r\n      <th>Language Support</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td>Selenium</td><td>Web automation</td><td>Java, C#, Python, JS</td></tr>\r\n    <tr><td>Cypress</td><td>Modern web testing</td><td>JavaScript</td></tr>\r\n    <tr><td>Playwright</td><td>Cross-browser web testing</td><td>JavaScript, Python, .NET</td></tr>\r\n    <tr><td>Appium</td><td>Mobile app automation</td><td>Multiple</td></tr>\r\n    <tr><td>JUnit/TestNG</td><td>Unit testing (Java)</td><td>Java</td></tr>\r\n    <tr><td>PyTest</td><td>Unit testing (Python)</td><td>Python</td></tr>\r\n    <tr><td>Postman</td><td>API testing</td><td>JavaScript (Tests)</td></tr>\r\n    <tr><td>Cucumber</td><td>BDD testing (Gherkin)</td><td>Java, JS, etc.</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<p><strong>💡 Best Practices for Automation Testing</strong></p>\r\n<ul>\r\n  <li>Prioritise test cases that run frequently and are stable</li>\r\n  <li>Use version control (e.g., Git) for scripts</li>\r\n  <li>Maintain test scripts regularly</li>\r\n  <li>Modularise test code for reusability</li>\r\n  <li>Use data-driven testing for better coverage</li>\r\n  <li>Integrate tests into CI/CD pipelines (Jenkins, GitHub Actions, etc.)</li>\r\n</ul>\r\n\r\n<p><strong>📈 When to Use Automation (vs Manual)</strong></p>\r\n<table className=\"table table-bordered\">\r\n  <thead>\r\n    <tr>\r\n      <th>Manual Testing</th>\r\n      <th>Automation Testing</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td>Exploratory, UI/UX, one-time test cases</td><td>Repetitive, stable, data-heavy test cases</td></tr>\r\n    <tr><td>New feature testing with many UI variations</td><td>Regression, load, or cross-browser testing</td></tr>\r\n    <tr><td>Unpredictable scenarios</td><td>Scenarios with expected outcomes</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<pre>\r\n<code>\r\n{`@Test\r\npublic void loginTest() {\r\n    WebDriver driver = new ChromeDriver();\r\n    driver.get(\"https://example.com/login\");\r\n    driver.findElement(By.id(\"email\")).sendKeys(\"test@example.com\");\r\n    driver.findElement(By.id(\"password\")).sendKeys(\"Password123\");\r\n    driver.findElement(By.id(\"loginBtn\")).click();\r\n\r\n    String actualTitle = driver.getTitle();\r\n    Assert.assertEquals(actualTitle, \"Dashboard - Example\");\r\n    driver.quit();\r\n}`}\r\n</code>\r\n</pre>\r\n\r\n\r\n<p><strong>🚀 Advantages of Automation Testing</strong></p>\r\n<ul>\r\n  <li>Fast execution</li>\r\n  <li>Early detection of defects</li>\r\n  <li>Enables continuous testing</li>\r\n  <li>Better ROI in long-term projects</li>\r\n</ul>\r\n\r\n<p><strong>⚠️ Disadvantages</strong></p>\r\n<ul>\r\n  <li>High initial investment</li>\r\n  <li>Not suitable for all test scenarios (e.g., UI/UX)</li>\r\n  <li>Requires skilled resources</li>\r\n  <li>Ongoing maintenance needed</li>\r\n</ul>\r\n</section>\r\n\r\n                <section className=\"mb-5\">\r\n                    <h2 id=\"performance-testing\" className=\"mt-5\">🚀 Performance Testing</h2>\r\n<p><strong>What is Performance Testing?</strong> Performance testing evaluates how a software application behaves under a specific workload. It ensures the system is fast, stable, scalable, and responsive under expected (and peak) user traffic. It’s not about finding functional bugs, but about identifying bottlenecks and performance issues.</p>\r\n\r\n<p><strong>🎯 Objectives of Performance Testing</strong></p>\r\n<ul>\r\n  <li>Measure system speed (response time, latency)</li>\r\n  <li>Validate scalability (can it handle more users?)</li>\r\n  <li>Ensure stability (under high load or stress)</li>\r\n  <li>Identify performance bottlenecks</li>\r\n  <li>Ensure compliance with SLAs (Service Level Agreements)</li>\r\n</ul>\r\n\r\n<p><strong>📊 Types of Performance Testing</strong></p>\r\n<table className=\"table table-bordered\">\r\n  <thead>\r\n    <tr><th>Type</th><th>Purpose</th></tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td>Load Testing</td><td>Check how the system performs under expected user load</td></tr>\r\n    <tr><td>Stress Testing</td><td>Test system under extreme load to find its breaking point</td></tr>\r\n    <tr><td>Spike Testing</td><td>Evaluate system reaction to sudden spikes in traffic</td></tr>\r\n    <tr><td>Endurance Testing</td><td>Check stability and performance over a prolonged period (soak test)</td></tr>\r\n    <tr><td>Scalability Testing</td><td>Measure system’s ability to scale up or down efficiently</td></tr>\r\n    <tr><td>Volume Testing</td><td>Assess performance with a large volume of data (e.g., millions of records)</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<p><strong>📈 Key Performance Metrics</strong></p>\r\n<table className=\"table table-bordered\">\r\n  <thead>\r\n    <tr><th>Metric</th><th>What It Measures</th></tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td>Response Time</td><td>Time taken to respond to a request</td></tr>\r\n    <tr><td>Throughput</td><td>Number of transactions handled per second/minute</td></tr>\r\n    <tr><td>Concurrent Users</td><td>Number of users accessing the app at once</td></tr>\r\n    <tr><td>Latency</td><td>Delay between request and response</td></tr>\r\n    <tr><td>Error Rate</td><td>Percentage of failed requests</td></tr>\r\n    <tr><td>CPU/Memory Utilisation</td><td>System resource consumption under load</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<p><strong>🧰 Popular Performance Testing Tools</strong></p>\r\n<table className=\"table table-bordered\">\r\n  <thead>\r\n    <tr><th>Tool</th><th>Use Case</th><th>Protocol Support</th></tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td>JMeter</td><td>Open-source load testing tool</td><td>Web, FTP, SOAP, REST, JDBC</td></tr>\r\n    <tr><td>LoadRunner</td><td>Enterprise-grade performance testing</td><td>Web, mobile, Citrix, SAP, etc.</td></tr>\r\n    <tr><td>Gatling</td><td>Developer-friendly load testing</td><td>HTTP, WebSockets</td></tr>\r\n    <tr><td>Locust</td><td>Python-based performance testing</td><td>HTTP</td></tr>\r\n    <tr><td>k6</td><td>Modern, scriptable load testing tool</td><td>HTTP, WebSockets</td></tr>\r\n    <tr><td>BlazeMeter</td><td>Cloud-based performance testing</td><td>Compatible with JMeter, Gatling</td></tr>\r\n    <tr><td>Artillery</td><td>Lightweight CLI tool for Node.js apps</td><td>HTTP, WebSocket, socket.io</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<p><strong>📝 Sample JMeter Scenario: Login Load Test</strong></p>\r\n<ul>\r\n  <li>Simulate 500 users logging in within 5 minutes.</li>\r\n  <li>Use CSV data for user credentials.</li>\r\n  <li>Measure response time, failure rate, and server CPU usage.</li>\r\n</ul>\r\n\r\n<p><strong>🧠 Common Bottlenecks Identified</strong></p>\r\n<ul>\r\n  <li>Slow database queries</li>\r\n  <li>Memory leaks</li>\r\n  <li>Improper caching</li>\r\n  <li>Backend service latency</li>\r\n  <li>Thread/contention issues</li>\r\n  <li>Misconfigured load balancers</li>\r\n</ul>\r\n\r\n<p><strong>✅ When to Perform Performance Testing</strong></p>\r\n<ul>\r\n  <li>Before major product releases</li>\r\n  <li>After infrastructure changes (e.g., server migration)</li>\r\n  <li>When introducing new features with high traffic potential</li>\r\n  <li>Periodically, as part of CI/CD pipelines</li>\r\n</ul>\r\n\r\n<p><strong>📋 Best Practices</strong></p>\r\n<ul>\r\n  <li>Start with realistic test scenarios</li>\r\n  <li>Incrementally increase load</li>\r\n  <li>Monitor end-to-end (app, server, DB, network)</li>\r\n  <li>Automate performance tests in CI/CD</li>\r\n  <li>Document baseline performance and goals</li>\r\n</ul>\r\n</section>\r\n\r\n<section className=\"mb-5\">\r\n  <h2 id=\"resources\" className=\"mt-5\">📚 Helpful Resources</h2>\r\n  <ul>\r\n    <li><a href=\"https://www.guru99.com/manual-testing.html\" target=\"_blank\" rel=\"noopener noreferrer\">Manual Testing Guide – Guru99</a></li>\r\n    <li><a href=\"https://www.selenium.dev/documentation/\" target=\"_blank\" rel=\"noopener noreferrer\">Selenium Documentation</a></li>\r\n    <li><a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Postman API Testing Tool</a></li>\r\n    <li><a href=\"https://junit.org/junit5/\" target=\"_blank\" rel=\"noopener noreferrer\">JUnit Testing Framework</a></li>\r\n    <li><a href=\"https://www.cypress.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Cypress – End-to-End Testing</a></li>\r\n    <li><a href=\"https://owasp.org/www-project-top-ten/\" target=\"_blank\" rel=\"noopener noreferrer\">OWASP Top 10 Security Risks</a></li>\r\n    <li><a href=\"https://testautomationu.applitools.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Test Automation University – Free Courses</a></li>\r\n  </ul>\r\n</section>\r\n\r\n                {/* <section className=\"mb-5\">\r\n                    <h2 id=\"test-cases\" className=\"mt-5\">📝 Download Beginner-Friendly Test Cases</h2>\r\n                    <p>Click each button to download a detailed, beginner-friendly test case for a specific functionality.</p>\r\n                    <div className=\"row\">\r\n                        {[...Array(10)].map((_, i) => (\r\n                            <div className=\"col-md-6 mb-2\" key={i}>\r\n                                <button className=\"btn btn-outline-primary w-100\" onClick={() => downloadTC(i + 1)}>\r\n                                    ${testCases[i + 1][1]}\r\n                                </button>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </section> */}\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withFooter(QualityAssuranceKnowledgePage);\r\n","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/SignInSignUpPage.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst SignInSignUpPage: React.FC = () => {\r\n    // State for Sign-In form\r\n    const [signInEmail, setSignInEmail] = useState('');\r\n    const [signInPassword, setSignInPassword] = useState('');\r\n    const [signInMessage, setSignInMessage] = useState(''); // Separate message for Sign In\r\n\r\n    // State for Sign-Up form\r\n    const [signUpEmail, setSignUpEmail] = useState('');\r\n    const [signUpPassword, setSignUpPassword] = useState('');\r\n    const [role, setRole] = useState('Observer');\r\n    const [signUpMessage, setSignUpMessage] = useState(''); // Separate message for Sign Up\r\n\r\n    const navigate = useNavigate(); // React Router's navigation hook\r\n\r\n    // Handle Sign-Up\r\n    const handleSignUp = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                'http://localhost:5000/signup', // Replace with your backend endpoint\r\n                { email: signUpEmail, password: signUpPassword, role }\r\n            );\r\n\r\n            // Store the JWT token in localStorage\r\n            localStorage.setItem('token', response.data.token);\r\n\r\n            setSignUpMessage(`User registered successfully as ${response.data.role}`);\r\n            console.log('Sign-up successful:', response.data);\r\n\r\n            // Redirect to HomePage after a short delay\r\n            setTimeout(() => {\r\n                navigate('/'); // Replace '/' with your actual HomePage route\r\n            }, 2000);\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                setSignUpMessage(error.response?.data?.message || 'An error occurred');\r\n            } else {\r\n                setSignUpMessage('An unexpected error occurred');\r\n            }\r\n        }\r\n    };\r\n\r\n    // Handle Sign-In\r\n    const handleSignIn = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                'http://localhost:5000/signin', // Replace with your backend endpoint\r\n                { email: signInEmail, password: signInPassword }\r\n            );\r\n\r\n            // Store the JWT token in localStorage\r\n            localStorage.setItem('token', response.data.token);\r\n\r\n            setSignInMessage('Login successful!');\r\n            console.log('Sign-in successful:', response.data);\r\n\r\n            // Redirect to HomePage after a short delay\r\n            setTimeout(() => {\r\n                navigate('/'); // Replace '/' with your actual HomePage route\r\n            }, 2000);\r\n        } catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                setSignInMessage(error.response?.data?.message || 'An error occurred');\r\n            } else {\r\n                setSignInMessage('An unexpected error occurred');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"signin-signup-page\">\r\n            <header className=\"text-center my-4\">\r\n                <h1>Sign In / Sign Up</h1>\r\n                <p>Please sign in or sign up to continue.</p>\r\n            </header>\r\n            <main className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    {/* Sign In Section */}\r\n                    <div className=\"col-md-5\">\r\n                        <div className=\"card login-card\">\r\n                            <div className=\"card-body\">\r\n                                <h2 className=\"card-title\">Sign In</h2>\r\n                                <form onSubmit={handleSignIn}>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"signin-email\">Email</label>\r\n                                        <input\r\n                                            type=\"email\"\r\n                                            className=\"form-control\"\r\n                                            id=\"signin-email\"\r\n                                            value={signInEmail}\r\n                                            onChange={(e) => setSignInEmail(e.target.value)}\r\n                                            placeholder=\"Enter your email\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"signin-password\">Password</label>\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            className=\"form-control\"\r\n                                            id=\"signin-password\"\r\n                                            value={signInPassword}\r\n                                            onChange={(e) => setSignInPassword(e.target.value)}\r\n                                            placeholder=\"Enter your password\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                    <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                                        Sign In\r\n                                    </button>\r\n                                </form>\r\n                                {signInMessage && <p className=\"mt-3 text-center\">{signInMessage}</p>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Sign Up Section */}\r\n                    <div className=\"col-md-5\">\r\n                        <div className=\"card signup-card\">\r\n                            <div className=\"card-body\">\r\n                                <h2 className=\"card-title\">Sign Up</h2>\r\n                                <form onSubmit={handleSignUp}>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"signup-email\">Email</label>\r\n                                        <input\r\n                                            type=\"email\"\r\n                                            className=\"form-control\"\r\n                                            id=\"signup-email\"\r\n                                            value={signUpEmail}\r\n                                            onChange={(e) => setSignUpEmail(e.target.value)}\r\n                                            placeholder=\"Enter your email\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"signup-password\">Password</label>\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            className=\"form-control\"\r\n                                            id=\"signup-password\"\r\n                                            value={signUpPassword}\r\n                                            onChange={(e) => setSignUpPassword(e.target.value)}\r\n                                            placeholder=\"Enter your password\"\r\n                                            required\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"signup-role\">Role</label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            id=\"signup-role\"\r\n                                            value={role}\r\n                                            onChange={(e) => setRole(e.target.value)}\r\n                                        >\r\n                                            <option value=\"Observer\">Observer</option>\r\n                                            <option value=\"Test Engineer\">Test Engineer</option>\r\n                                            <option value=\"Administrator\">Administrator</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <button type=\"submit\" className=\"btn btn-success btn-block\">\r\n                                        Sign Up\r\n                                    </button>\r\n                                </form>\r\n                                {signUpMessage && <p className=\"mt-3 text-center\">{signUpMessage}</p>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignInSignUpPage;","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../styles/backButton.css'; // Import the CSS file for the back button\r\n\r\nconst BackButton: React.FC = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const handleClick = () => {\r\n        navigate('/test-case-generation'); // Navigate to the test-case-generation page\r\n    };\r\n\r\n    return (\r\n        <button className=\"back-button\" onClick={handleClick}>\r\n            Back\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default BackButton;","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport BackButton from '../components/BackButton';\r\nimport withFooter from '../components/withFooter';\r\nimport '../styles/global.css'; // Import the global CSS file\r\n\r\nconst URLBasedGenerationPage: React.FC = () => {\r\n    const [url, setUrl] = useState('');\r\n    const [testCases, setTestCases] = useState<string[]>([]);\r\n    const [error, setError] = useState('');\r\n    const [role, setRole] = useState<string | null>(null);\r\n    const navigate = useNavigate();\r\n\r\n    // Check user role and redirect if unauthorized\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            navigate('/signin-signup'); // Redirect to login if not logged in\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\r\n            setRole(decodedToken.role);\r\n\r\n            if (decodedToken.role !== 'Engineer' && decodedToken.role !== 'Administrator'&& decodedToken.role !== 'Observer') {\r\n                alert('Access denied. Only Engineers and Administrators can access this page.');\r\n                navigate('/'); // Redirect to home page or another appropriate page\r\n            }\r\n        } catch (error) {\r\n            console.error('Error decoding token:', error);\r\n            navigate('/signin-signup'); // Redirect to login if token is invalid\r\n        }\r\n    }, [navigate]);\r\n\r\n    const handleAnalyze = async () => {\r\n        setError('');\r\n        setTestCases([]);\r\n\r\n        if (!url) {\r\n            setError('Please enter a valid URL.');\r\n            return;\r\n        }\r\n\r\n        const token = localStorage.getItem('token'); // Retrieve the token from localStorage\r\n        if (!token) {\r\n            setError('You must be logged in to analyze a URL.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/analyze-url', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${token}`, // Include the token in the Authorization header\r\n                },\r\n                body: JSON.stringify({ url }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Failed to analyze the URL.');\r\n            }\r\n\r\n            const data = await response.json();\r\n            setTestCases(data.testCases || []);\r\n        } catch (err) {\r\n            if (err instanceof Error) {\r\n                setError(err.message);\r\n            } else {\r\n                setError('An unexpected error occurred while analyzing the URL.');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"url-based-generation-page\">\r\n            <header className=\"text-center my-4\">\r\n                <h1>URL-Based Generation</h1>\r\n                <p>Analyze your web application's structure to identify key UI elements and automatically create comprehensive test scenarios.</p>\r\n            </header>\r\n            <main className=\"container\">\r\n                <section className=\"my-4\">\r\n                    <h2>Enter URL</h2>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Enter the URL of the web page\"\r\n                            value={url}\r\n                            onChange={(e) => setUrl(e.target.value)}\r\n                        />\r\n                        <button className=\"btn btn-primary mt-2\" onClick={handleAnalyze}>\r\n                            Analyze\r\n                        </button>\r\n                    </div>\r\n                    {error && <p className=\"text-danger mt-2\">{error}</p>}\r\n                </section>\r\n                <section className=\"my-4\">\r\n                    <h2>Generated Test Cases</h2>\r\n                    {testCases.length > 0 ? (\r\n                        <ul>\r\n                            {testCases.map((testCase, index) => (\r\n                                <li key={index}>{testCase}</li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : (\r\n                        <p>No test cases generated yet.</p>\r\n                    )}\r\n                </section>\r\n            </main>\r\n            <BackButton />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withFooter(URLBasedGenerationPage);","import React, { useState } from 'react';\r\nimport '../styles/global.css'; // Import global styles\r\nimport BackButton from '../components/BackButton';\r\nimport withFooter from '../components/withFooter';\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap'; // Install react-bootstrap if not already installed\r\n\r\nconst ScreenshotBasedGenerationPage: React.FC = () => {\r\n    const [image, setImage] = useState<File | null>(null);\r\n    const [testCases, setTestCases] = useState<string[]>([]);\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Handle image upload\r\n    const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files && event.target.files[0]) {\r\n            const file = event.target.files[0];\r\n            if (!['image/png', 'image/jpeg', 'image/jpg'].includes(file.type)) {\r\n                setError('Invalid file type. Please upload a PNG or JPEG image.');\r\n                return;\r\n            }\r\n            if (file.size > 5 * 1024 * 1024) { // 5MB limit\r\n                setError('File size exceeds 5MB. Please upload a smaller image.');\r\n                return;\r\n            }\r\n            setImage(file);\r\n            setError('');\r\n        }\r\n    };\r\n\r\n    // Analyze the uploaded screenshot\r\n    const handleAnalyze = async () => {\r\n        setError('');\r\n        setTestCases([]);\r\n        setLoading(true);\r\n\r\n        if (!image) {\r\n            setError('Please upload a screenshot.');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const token = localStorage.getItem('token'); // Retrieve the token from localStorage\r\n        if (!token) {\r\n            setError('You must be logged in to analyze a screenshot.');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append('image', image); // Append the image file to the form data\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/analyze-screenshot', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`, // Include the token in the Authorization header\r\n                },\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                if (response.status === 401) {\r\n                    throw new Error('Unauthorized. Please log in again.');\r\n                } else if (response.status === 500) {\r\n                    throw new Error('Server error. Please try again later.');\r\n                } else {\r\n                    const errorData = await response.json();\r\n                    throw new Error(errorData.message || 'Failed to analyze the screenshot.');\r\n                }\r\n            }\r\n\r\n            const data = await response.json();\r\n            setTestCases(data.testCases || []);\r\n        } catch (err) {\r\n            if (err instanceof Error) {\r\n                setError(err.message);\r\n            } else {\r\n                setError('An unexpected error occurred while analyzing the screenshot.');\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Function to handle file download\r\n    const downloadFile = (format: string) => {\r\n        if (testCases.length === 0) {\r\n            setError('No test cases available to download.');\r\n            return;\r\n        }\r\n\r\n        let content = '';\r\n        let mimeType = '';\r\n        let fileExtension = '';\r\n\r\n        switch (format) {\r\n            case 'txt':\r\n                content = testCases.join('\\n');\r\n                mimeType = 'text/plain';\r\n                fileExtension = 'txt';\r\n                break;\r\n            case 'csv':\r\n                content = testCases.map((testCase, index) => `${index + 1},${testCase}`).join('\\n');\r\n                mimeType = 'text/csv';\r\n                fileExtension = 'csv';\r\n                break;\r\n            case 'json':\r\n                content = JSON.stringify(testCases, null, 2);\r\n                mimeType = 'application/json';\r\n                fileExtension = 'json';\r\n                break;\r\n            case 'xml':\r\n                content = `<testCases>${testCases.map(tc => `<testCase>${tc}</testCase>`).join('')}</testCases>`;\r\n                mimeType = 'application/xml';\r\n                fileExtension = 'xml';\r\n                break;\r\n            default:\r\n                setError('Unsupported file format.');\r\n                return;\r\n        }\r\n\r\n        const blob = new Blob([content], { type: mimeType });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = `test_cases.${fileExtension}`;\r\n        link.click();\r\n    };\r\n\r\n    return (\r\n        <div className=\"screenshot-based-generation-page\">\r\n            <header className=\"text-center my-4\">\r\n                <h1>Screenshot-Based Test Case Generation</h1>\r\n                <p>Upload a screenshot to analyze the DOM structure and generate QA test cases.</p>\r\n            </header>\r\n            <main className=\"container\">\r\n                <section className=\"my-4\">\r\n                    <h2>Upload Screenshot</h2>\r\n                    <input\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={handleImageUpload}\r\n                        className=\"form-control my-2\"\r\n                        aria-label=\"Upload a screenshot for analysis\"\r\n                    />\r\n                    {image && (\r\n                        <div className=\"image-preview my-3 text-center\">\r\n                            <h3>Preview:</h3>\r\n                            <img\r\n                                src={URL.createObjectURL(image)}\r\n                                alt=\"Uploaded Screenshot Preview\"\r\n                                style={{\r\n                                    maxWidth: '100%',\r\n                                    maxHeight: '300px',\r\n                                    border: '1px solid #ccc',\r\n                                    display: 'block',\r\n                                    margin: '0 auto', // Center the image horizontally\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <button\r\n                        className=\"btn btn-primary mt-2\"\r\n                        onClick={handleAnalyze}\r\n                        disabled={loading}\r\n                        aria-label=\"Analyze the uploaded screenshot\"\r\n                    >\r\n                        {loading ? 'Analyzing...' : 'Analyze Screenshot'}\r\n                    </button>\r\n                    {error && (\r\n                        <div className=\"mt-3\">\r\n                            <p className=\"text-danger\">{error}</p>\r\n                            <button\r\n                                className=\"btn btn-secondary me-2\"\r\n                                onClick={handleAnalyze}\r\n                            >\r\n                                Retry\r\n                            </button>\r\n                            <button\r\n                                className=\"btn btn-outline-danger\"\r\n                                onClick={() => {\r\n                                    setImage(null);\r\n                                    setError('');\r\n                                    setTestCases([]);\r\n                                }}\r\n                            >\r\n                                Clear\r\n                            </button>\r\n                        </div>\r\n                    )}\r\n                </section>\r\n                <section className=\"my-4\">\r\n                    <h2>Generated Test Cases</h2>\r\n                    {testCases.length > 0 ? (\r\n                        <>\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>#</th>\r\n                                        <th>Test Case</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {testCases.map((testCase, index) => (\r\n                                        <tr key={index}>\r\n                                            <td>{index + 1}</td>\r\n                                            <td>{testCase}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                            <DropdownButton id=\"dropdown-download-button\"\r\n                                title=\"Download Test Cases\"\r\n                                className=\"btn btn-success mt-3\">\r\n                                <Dropdown.Item onClick={() => downloadFile('txt')}>Download as TXT</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => downloadFile('csv')}>Download as CSV</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => downloadFile('json')}>Download as JSON</Dropdown.Item>\r\n                                <Dropdown.Item onClick={() => downloadFile('xml')}>Download as XML</Dropdown.Item>\r\n                            </DropdownButton>\r\n                        </>\r\n                    ) : (\r\n                        <p>{error ? error : 'No test cases generated. Please try with a different screenshot.'}</p>\r\n                    )}\r\n                </section>\r\n            </main>\r\n            <BackButton />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withFooter(ScreenshotBasedGenerationPage);","import React, { useState } from 'react';\r\nimport BackButton from '../components/BackButton';\r\nimport withFooter from '../components/withFooter';\r\nimport '../styles/global.css'; // Import the global CSS file\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap'; // Import Bootstrap components\r\n\r\nconst TestCaseClassificationPage: React.FC = () => {\r\n    const [testCases, setTestCases] = useState<string[]>([]);\r\n    const [classifiedTestCases, setClassifiedTestCases] = useState<any[]>([]);\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // Handle file upload\r\n    const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setError('');\r\n        if (event.target.files && event.target.files[0]) {\r\n            const file = event.target.files[0];\r\n            if (!file.name.endsWith('.txt') && !file.name.endsWith('.csv')) {\r\n                setError('Invalid file type. Please upload a .txt or .csv file.');\r\n                return;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n\r\n            try {\r\n                setLoading(true);\r\n                const response = await fetch('http://localhost:5000/api/classify-test-cases', {\r\n                    method: 'POST',\r\n                    body: formData,\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    const errorData = await response.json();\r\n                    throw new Error(errorData.message || 'Failed to classify test cases.');\r\n                }\r\n\r\n                const data = await response.json();\r\n                setClassifiedTestCases(data.classifiedTestCases || []);\r\n            } catch (err) {\r\n                setError(err instanceof Error ? err.message : 'An unexpected error occurred.');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Handle manual test case input\r\n    const handleManualInput = async (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        const input = event.target.value;\r\n        if (!input.trim()) {\r\n            setError('Please enter test cases.');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setLoading(true);\r\n            const response = await fetch('http://localhost:5000/api/classify-test-cases', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ testCases: input }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Failed to classify test cases.');\r\n            }\r\n\r\n            const data = await response.json();\r\n            setClassifiedTestCases(data.classifiedTestCases || []);\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : 'An unexpected error occurred.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Move test cases to ManagementPage\r\n   const moveToManagementPage = async () => {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/api/save-test-set', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${localStorage.getItem('token')}`, // Include the user's token\r\n            },\r\n            body: JSON.stringify({\r\n                testCases: classifiedTestCases,\r\n                pageTag: 'TestCaseClassificationPage', // Tag to identify the source page\r\n            }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.json();\r\n            throw new Error(errorData.message || 'Failed to save test set.');\r\n        }\r\n\r\n        const data = await response.json();\r\n        const filePath = data.filePath; // Get the file path of the saved XML file\r\n\r\n        // Redirect to ManagementPage with the file path\r\n        window.location.href = `/management?filePath=${encodeURIComponent(filePath)}`;\r\n    } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'An unexpected error occurred.');\r\n    }\r\n};\r\n\r\n    // Export test cases in the selected format\r\n    const exportTestCases = (format: string) => {\r\n        if (classifiedTestCases.length === 0) {\r\n            setError('No test cases to export.');\r\n            return;\r\n        }\r\n\r\n        let content = '';\r\n        let mimeType = '';\r\n        let fileExtension = '';\r\n\r\n        if (format === 'csv') {\r\n            content = 'Test Case,Category,Type\\n';\r\n            content += classifiedTestCases\r\n                .map((item) => `${item.testCase},${item.category},${item.type}`)\r\n                .join('\\n');\r\n            mimeType = 'text/csv';\r\n            fileExtension = 'csv';\r\n        } else if (format === 'txt') {\r\n            content = classifiedTestCases\r\n                .map((item) => `Test Case: ${item.testCase}\\nCategory: ${item.category}\\nType: ${item.type}\\n`)\r\n                .join('\\n');\r\n            mimeType = 'text/plain';\r\n            fileExtension = 'txt';\r\n        } else if (format === 'json') {\r\n            content = JSON.stringify(classifiedTestCases, null, 2); // Pretty JSON format\r\n            mimeType = 'application/json';\r\n            fileExtension = 'json';\r\n        } else if (format === 'xml') {\r\n            content = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<testCases>\\n';\r\n            content += classifiedTestCases\r\n                .map(\r\n                    (item) =>\r\n                        `  <testCase>\\n    <description>${item.testCase}</description>\\n    <category>${item.category}</category>\\n    <type>${item.type}</type>\\n  </testCase>`\r\n                )\r\n                .join('\\n');\r\n            content += '\\n</testCases>';\r\n            mimeType = 'application/xml';\r\n            fileExtension = 'xml';\r\n        }\r\n\r\n        const blob = new Blob([content], { type: mimeType });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = `classified_test_cases.${fileExtension}`;\r\n        link.click();\r\n    };\r\n\r\n    return (\r\n        <div className=\"test-case-classification-page\">\r\n            <header className=\"text-center my-4\">\r\n                <h1>Test Case Classification</h1>\r\n                <p>Use predefined models to validate and classify test cases efficiently.</p>\r\n            </header>\r\n            <main className=\"container\">\r\n                <section className=\"my-4\">\r\n                    <h2>Upload or Enter Test Cases</h2>\r\n                    <input\r\n                        type=\"file\"\r\n                        accept=\".txt,.csv\"\r\n                        onChange={handleFileUpload}\r\n                        className=\"form-control my-2\"\r\n                        aria-label=\"Upload a .txt or .csv file containing test cases\"\r\n                    />\r\n                    <textarea\r\n                        className=\"form-control my-2\"\r\n                        rows={5}\r\n                        placeholder=\"Enter test cases manually, one per line...\"\r\n                        onBlur={handleManualInput}\r\n                    ></textarea>\r\n                    {error && <p className=\"text-danger mt-2\">{error}</p>}\r\n                </section>\r\n                <section className=\"my-4\">\r\n                    <h2>Classified Test Cases</h2>\r\n                    {classifiedTestCases.length > 0 ? (\r\n                        <>\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Test Case</th>\r\n                                        <th>Category</th>\r\n                                        <th>Type</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {classifiedTestCases.map((item, index) => (\r\n                                        <tr key={index}>\r\n                                            <td>{item.testCase}</td>\r\n                                            <td>{item.category}</td>\r\n                                            <td>{item.type}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                            <div className=\"d-flex justify-content-between align-items-center mt-3\">\r\n                                <button\r\n                                    className=\"btn btn-success\"\r\n                                    onClick={moveToManagementPage}\r\n                                    aria-label=\"Move test cases to Management Page\"\r\n                                >\r\n                                    Move to Management Page\r\n                                </button>\r\n                                <DropdownButton\r\n                                    id=\"dropdown-basic-button\"\r\n                                    title=\"Export Test Cases\"\r\n                                    className=\"mt-3\"\r\n                                >\r\n                                    <Dropdown.Item onClick={() => exportTestCases('csv')}>Export as CSV</Dropdown.Item>\r\n                                    <Dropdown.Item onClick={() => exportTestCases('txt')}>Export as TXT</Dropdown.Item>\r\n                                    <Dropdown.Item onClick={() => exportTestCases('json')}>Export as JSON</Dropdown.Item>\r\n                                    <Dropdown.Item onClick={() => exportTestCases('xml')}>Export as XML</Dropdown.Item>\r\n                                </DropdownButton>\r\n                            </div>\r\n                            <div className=\"text-end mt-3\">\r\n                                    <small className=\"text-muted mt-1\">Press to select and export a file type</small>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <p>No test cases classified yet. Please upload or enter test cases to classify.</p>\r\n                    )}\r\n                </section>\r\n            </main>\r\n            <BackButton />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withFooter(TestCaseClassificationPage);","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport '../styles/global.css';\r\nimport BackButton from '../components/BackButton';\r\nimport withFooter from '../components/withFooter';\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\r\n\r\nconst ManagementPage: React.FC = () => {\r\n    const [userFiles, setUserFiles] = useState<any[]>([]);\r\n    const [selectedFile, setSelectedFile] = useState<string | null>(null);\r\n    const [fileContent, setFileContent] = useState<any[]>([]);\r\n    const [editableContent, setEditableContent] = useState<any[]>([]);\r\n    const [editHistory, setEditHistory] = useState<any[][]>([]);\r\n    const [tableHeaders, setTableHeaders] = useState<string[]>([]);\r\n    const [isEditMode, setIsEditMode] = useState(false);\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [role, setRole] = useState<string | null>(null); // Track the user's role\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const pageTag = queryParams.get('pageTag');\r\n\r\n    // Decode user role from JWT and apply role-based restrictions\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            navigate('/signin-signup'); // Redirect to login if not logged in\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\r\n            setRole(decodedToken.role);\r\n\r\n            // Redirect if the user role is not authorized\r\n            if (decodedToken.role === 'Observer') {\r\n                console.warn('Access restricted for Observer role.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error decoding token:', error);\r\n            navigate('/signin-signup'); // Redirect to login if token is invalid\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Fetch user files\r\n    const fetchUserFiles = async () => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            setError('User is not authenticated. Please log in.');\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setIsLoading(true);\r\n            setError('');\r\n\r\n            const response = await fetch(\r\n                `http://localhost:5000/api/get-user-files${pageTag ? `?pageTag=${pageTag}` : ''}`,\r\n                {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Failed to fetch user files.');\r\n            }\r\n\r\n            const data = await response.json();\r\n            setUserFiles(data.files || []);\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : 'An unexpected error occurred.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fetch file content\r\n    const fetchFileContent = async (fileName: string) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/get-file-content?fileName=${fileName}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Failed to fetch file content.');\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.content && data.content.length > 0) {\r\n                const headers = Object.keys(data.content[0]);\r\n                setTableHeaders(headers);\r\n            }\r\n\r\n            setFileContent(data.content || []);\r\n            setEditableContent(data.content || []);\r\n            setSelectedFile(fileName);\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : 'An unexpected error occurred.');\r\n        }\r\n    };\r\n\r\n    // Save changes\r\n    const saveChanges = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/save-file-content', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n                },\r\n                body: JSON.stringify({ fileName: selectedFile, content: editableContent }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Failed to save changes.');\r\n            }\r\n\r\n            const data = await response.json();\r\n            setFileContent(data.content || []);\r\n            setEditableContent(data.content || []);\r\n            setIsEditMode(false);\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : 'An unexpected error occurred.');\r\n        }\r\n    };\r\n\r\n    // Undo last edit\r\n    const undoLastEdit = () => {\r\n        if (editHistory.length > 0) {\r\n            const lastEdit = editHistory[editHistory.length - 1];\r\n            setEditableContent(lastEdit);\r\n            setEditHistory(editHistory.slice(0, -1));\r\n        } else {\r\n            setError('No edits to undo.');\r\n        }\r\n    };\r\n\r\n    // Export file\r\n    const exportFile = (format: string) => {\r\n        if (fileContent.length === 0) {\r\n            setError('No content to export.');\r\n            return;\r\n        }\r\n\r\n        let content = '';\r\n        let mimeType = '';\r\n        let fileExtension = '';\r\n\r\n        if (format === 'csv') {\r\n            content = tableHeaders.join(',') + '\\n';\r\n            content += fileContent.map((row) => tableHeaders.map((header) => row[header]).join(',')).join('\\n');\r\n            mimeType = 'text/csv';\r\n            fileExtension = 'csv';\r\n        } else if (format === 'txt') {\r\n            content = fileContent\r\n                .map((row) => tableHeaders.map((header) => `${header}: ${row[header]}`).join('\\n'))\r\n                .join('\\n\\n');\r\n            mimeType = 'text/plain';\r\n            fileExtension = 'txt';\r\n        } else if (format === 'json') {\r\n            content = JSON.stringify(fileContent, null, 2);\r\n            mimeType = 'application/json';\r\n            fileExtension = 'json';\r\n        } else if (format === 'xml') {\r\n            content = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<testCases>\\n';\r\n            content += fileContent\r\n                .map(\r\n                    (row) =>\r\n                        `  <testCase>\\n${tableHeaders\r\n                            .map((header) => `    <${header}>${row[header]}</${header}>`)\r\n                            .join('\\n')}\\n  </testCase>`\r\n                )\r\n                .join('\\n');\r\n            content += '\\n</testCases>';\r\n            mimeType = 'application/xml';\r\n            fileExtension = 'xml';\r\n        }\r\n\r\n        const blob = new Blob([content], { type: mimeType });\r\n        const link = document.createElement('a');\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = `exported_file.${fileExtension}`;\r\n        link.click();\r\n    };\r\n\r\n    // Filter files based on search query\r\n    const filteredFiles = userFiles.filter((file) =>\r\n        file.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n\r\n    useEffect(() => {\r\n        fetchUserFiles();\r\n    }, [pageTag]);\r\n\r\n    return (\r\n        <div className={`management-page d-flex ${role === 'Observer' ? 'blurred' : ''}`}>\r\n            {/* Translucent overlay for Observer role */}\r\n            {role === 'Observer' && (\r\n                <div\r\n                    className=\"position-absolute top-0 start-0 w-100 h-100 d-flex flex-column justify-content-center align-items-center\"\r\n                    style={{\r\n                        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n                        zIndex: 10,\r\n                    }}\r\n                >\r\n                    <h2 className=\"text-white text-center\">Access Restricted</h2>\r\n                    <p className=\"text-white text-center\">\r\n                        Please contact a <strong>MORDOR Dev</strong> to change your role to Administrator or Engineer.\r\n                    </p>\r\n                </div>\r\n            )}\r\n            {/* Left Panel: Your Files */}\r\n            <aside className=\"files-panel border-end p-3\" style={{ width: '25%', overflowY: 'auto' }}>\r\n                <h2>Your Files</h2>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control my-2\"\r\n                    placeholder=\"Search files...\"\r\n                    value={searchQuery}\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                />\r\n                {isLoading ? (\r\n                    <div className=\"text-center my-4\">\r\n                        <p>Loading files...</p>\r\n                        <div className=\"spinner-border text-primary\" role=\"status\">\r\n                            <span className=\"visually-hidden\">Loading...</span>\r\n                        </div>\r\n                    </div>\r\n                ) : filteredFiles.length > 0 ? (\r\n                    <ul className=\"list-group\">\r\n                        {filteredFiles.map((file) => (\r\n                            <li\r\n                                key={file}\r\n                                className={`list-group-item ${selectedFile === file ? 'active' : ''}`}\r\n                                onClick={() => fetchFileContent(file)}\r\n                                style={{ cursor: 'pointer' }}\r\n                            >\r\n                                {file}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                ) : (\r\n                    <p className=\"text-muted\">No files match your search.</p>\r\n                )}\r\n            </aside>\r\n\r\n            {/* Right Panel: File Content */}\r\n            <main className=\"content-panel p-3\" style={{ width: '75%' }}>\r\n                <header className=\"text-center my-4\">\r\n                    <h1>Test Case Management</h1>\r\n                    {error && <p className=\"text-danger text-center\">{error}</p>}\r\n                </header>\r\n                <section className=\"my-4\">\r\n                    <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n                        <button className=\"btn btn-secondary\" onClick={() => setIsEditMode(!isEditMode)}>\r\n                            {isEditMode ? 'Switch to View Mode' : 'Switch to Edit Mode'}\r\n                        </button>\r\n                        <DropdownButton id=\"dropdown-basic-button\" title=\"Export\">\r\n                            <Dropdown.Item onClick={() => exportFile('csv')}>Export as CSV</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => exportFile('txt')}>Export as TXT</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => exportFile('json')}>Export as JSON</Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => exportFile('xml')}>Export as XML</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </div>\r\n                    {fileContent.length > 0 ? (\r\n                        <>\r\n                            <table className=\"table table-bordered\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        {tableHeaders.map((header) => (\r\n                                            <th key={header}>{header}</th>\r\n                                        ))}\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {editableContent.map((row, rowIndex) => (\r\n                                        <tr key={rowIndex}>\r\n                                            {tableHeaders.map((header) => (\r\n                                                <td key={header}>\r\n                                                    {isEditMode ? (\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            value={row[header]}\r\n                                                            onChange={(e) =>\r\n                                                                setEditableContent((prev) => {\r\n                                                                    const updated = [...prev];\r\n                                                                    updated[rowIndex][header] = e.target.value;\r\n                                                                    return updated;\r\n                                                                })\r\n                                                            }\r\n                                                            className=\"form-control\"\r\n                                                        />\r\n                                                    ) : (\r\n                                                        row[header]\r\n                                                    )}\r\n                                                </td>\r\n                                            ))}\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                            <div className=\"d-flex justify-content-between mt-3\">\r\n                                <button className=\"btn btn-success\" onClick={saveChanges}>\r\n                                    Save Changes\r\n                                </button>\r\n                                <button className=\"btn btn-warning\" onClick={undoLastEdit}>\r\n                                    Undo Last Edit\r\n                                </button>\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <p>Select a file to view its content.</p>\r\n                    )}\r\n                </section>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withFooter(ManagementPage);","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport HomePage from './pages/HomePage';\r\nimport TestCaseGenerationPage from './pages/TestCaseGenerationPage';\r\nimport TestCaseTemplatesPage from './pages/TestCaseTemplatesPage';\r\nimport QualityAssuranceKnowledgePage from './pages/QualityAssuranceKnowledgePage';\r\nimport SignInSignUpPage from './pages/SignInSignUpPage';\r\nimport URLBasedGenerationPage from './pages/URLBasedGenerationPage';\r\nimport ScreenshotBasedGenerationPage from './pages/ScreenshotBasedGenerationPage';\r\nimport TestCaseClassificationPage from './pages/TestCaseClassificationPage';\r\nimport ManagementPage from './pages/ManagementPage' // Ensure the file exists at this path or correct the path if necessary\r\nimport './styles/App.css';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<HomePage />} />\r\n          <Route path=\"/test-case-generation\" element={<TestCaseGenerationPage />} />\r\n          <Route path=\"/test-case-templates\" element={<TestCaseTemplatesPage />} />\r\n          <Route path=\"/quality-assurance-knowledge\" element={<QualityAssuranceKnowledgePage />} />\r\n          <Route path=\"/signin-signup\" element={<SignInSignUpPage />} />\r\n          <Route path=\"/url-based-generation\" element={<URLBasedGenerationPage />} />\r\n          <Route path=\"/screenshot-based-generation\" element={<ScreenshotBasedGenerationPage />} />\r\n          <Route path=\"/test-case-classification\" element={<TestCaseClassificationPage />} />\r\n          <Route path=\"/management\" element={<ManagementPage />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}